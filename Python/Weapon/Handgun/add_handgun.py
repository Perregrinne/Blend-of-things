bl_info = {
    "name": "Handgun Generator",
    "description": "Generates a very basic handgun.",
    "author": "Austin Jacob",
    "version": (1, 0, 0),
    "blender": (2, 79, 0),
    "location": "View3D > Add > Mesh",
    "warning": "", # used for warning icon and text in addons panel
    "wiki_url": "",
    "tracker_url": "",
    "category": "Add Mesh"}

# License for this script is GNU GPL Version 3
# The text for this license can be found here:
# https://www.gnu.org/licenses/gpl-3.0.en.html

import bpy
import bmesh
import mathutils
import math

def make_slide(str, seg, h_offset, front, w):
    #Basic geometry:
    verts= [(1.0470174551010132, -0.0003926826175302267, 0.9099998474121094),
            (-0.9360097050666809, -0.00039251893758773804, 0.9099998474121094),
            (1.4532678127288818, 0.13768048584461212, 0.8933309316635132),
            (1.4532678127288818, 0.1238132119178772, 0.5749953985214233),
            (-1.0205999612808228, 0.20955562591552734, 0.5749953985214233),
            (1.4082677364349365, 0.1238132119178772, 0.5749953985214233),
            (1.4532678127288818, -0.14259295165538788, 0.8933309316635132),
            (1.4532678127288818, -0.1246243417263031, 0.5749953985214233),
            (1.4532678127288818, 6.389617919921875e-05, 0.5749953985214233),
            (-1.0205999612808228, -0.2103661596775055, 0.5749953985214233),
            (1.4082677364349365, -0.1246243417263031, 0.5749953985214233),
            (1.4082677364349365, 6.395578384399414e-05, 0.5749953985214233),
            (1.1645176410675049, -0.01133030652999878, 0.9099998474121094),
            (1.3157678842544556, 0.13768048584461212, 0.8933309316635132),
            (1.1782677173614502, 0.13768048584461212, 0.8933309316635132),
            (1.3157678842544556, -0.14259295165538788, 0.8933309316635132),
            (1.178267478942871, -0.14259295165538788, 0.8933309316635132),
            (1.1645177602767944, 0.01054471731185913, 0.9099998474121094),
            (-1.0205999612808228, 0.1417822390794754, 0.8933309316635132),
            (-1.0205999612808228, -0.14259271323680878, 0.8933309316635132),
            (-0.7123985886573792, -0.00039255619049072266, 0.9099998474121094),
            (-0.71908038854599, -0.14259286224842072, 0.8947199583053589),
            (-0.7190797924995422, 0.14178211987018585, 0.8947199583053589),
            (-0.7318429946899414, -0.0003925301134586334, 0.9099998474121094),
            (-0.9012874960899353, -0.00039252638816833496, 0.9099998474121094),
            (-1.0205999612808228, -0.00039249658584594727, 0.9099998474121094),
            (-0.9280373454093933, -0.14259286224842072, 0.8961091041564941),
            (-0.8915340900421143, -0.14259286224842072, 0.8947200775146484),
            (-0.9280368089675903, 0.14178211987018585, 0.8961091041564941),
            (-0.8915335536003113, 0.14178211987018585, 0.8947200775146484),
            (1.4532678127288818, -0.22190271317958832, 0.876662015914917),
            (-1.0205999612808228, -0.22190271317958832, 0.876662015914917),
            (-1.0205999612808228, 0.22106601297855377, 0.876662015914917),
            (1.4532678127288818, 0.22106601297855377, 0.876662015914917),
            (1.4532678127288818, -0.22190271317958832, 0.5749953985214233),
            (-1.0205999612808228, -0.22190271317958832, 0.5749953985214233),
            (-1.0205999612808228, 0.22106601297855377, 0.5749953985214233),
            (1.4532678127288818, 0.22106601297855377, 0.5749953985214233),
            (1.4082677364349365, -0.2108285278081894, 0.5749953985214233),
            (-0.38537561893463135, 0.20999206602573395, 0.6545792818069458),
            (-1.0205999612808228, 0.20955562591552734, 0.6545792818069458),
            (1.4082677364349365, 0.20999182760715485, 0.5749953985214233),
            (1.4532678127288818, -0.022267818450927734, 0.9099998474121094),
            (1.4532678127288818, 0.021482229232788086, 0.9099998474121094),
            (-1.0205999612808228, -0.079692542552948, 0.9058326482772827),
            (-1.0205999612808228, 0.07890117168426514, 0.9058326482772827),
            (1.4532678127288818, -0.06601786613464355, 0.5749953985214233),
            (1.4532678127288818, 0.0652322769165039, 0.5749953985214233),
            (1.4082677364349365, -0.06601786613464355, 0.5749953985214233),
            (1.4082677364349365, 0.0652322769165039, 0.5749953985214233),
            (-0.38537561893463135, -0.21082817018032074, 0.6545792818069458),
            (1.1782677173614502, 0.22106601297855377, 0.876662015914917),
            (1.3157678842544556, 0.22106601297855377, 0.876662015914917),
            (1.3157678842544556, -0.22190271317958832, 0.876662015914917),
            (1.178267478942871, -0.22190271317958832, 0.876662015914917),
            (1.1782677173614502, 0.22106601297855377, 0.5749953985214233),
            (1.3157678842544556, 0.22106601297855377, 0.5749953985214233),
            (1.3157678842544556, -0.22190271317958832, 0.5749953985214233),
            (1.178267478942871, -0.22190271317958832, 0.5749953985214233),
            (1.1782677173614502, 0.20999188721179962, 0.5749953985214233),
            (1.3157678842544556, 0.209991917014122, 0.5749953985214233),
            (1.3157678842544556, -0.2108285278081894, 0.5749953985214233),
            (1.178267478942871, -0.21082843840122223, 0.5749953985214233),
            (1.1782677173614502, 0.021482229232788086, 0.9099998474121094),
            (1.3157678842544556, 0.021482229232788086, 0.9099998474121094),
            (1.178267478942871, -0.022267818450927734, 0.9099998474121094),
            (1.3157678842544556, -0.022267818450927734, 0.9099998474121094),
            (1.3157678842544556, 0.01054471731185913, 0.9424998760223389),
            (1.3157678842544556, -0.01133030652999878, 0.9424998760223389),
            (-0.7196535468101501, -0.22190271317958832, 0.876662015914917),
            (-0.7196527123451233, 0.22106601297855377, 0.876662015914917),
            (-0.7696526646614075, 0.22106601297855377, 0.5749953985214233),
            (-0.7696536183357239, -0.22190271317958832, 0.5749953985214233),
            (-0.7696526646614075, 0.20999206602573395, 0.5749953985214233),
            (-0.7696534991264343, -0.21082822978496552, 0.5749953985214233),
            (-0.7123987674713135, -0.050067007541656494, 0.9099998474121094),
            (-0.7123985290527344, 0.04928189516067505, 0.9099998474121094),
            (-0.7318431735038757, -0.05507999658584595, 0.9099998474121094),
            (-0.9012876152992249, -0.05507999658584595, 0.9099998474121094),
            (-0.7318429350852966, 0.05429494380950928, 0.9099998474121094),
            (-0.9012873768806458, 0.05429494380950928, 0.9099998474121094),
            (-0.7123985886573792, 0.019203782081604004, 0.9099998474121094),
            (-0.7123986482620239, -0.01998889446258545, 0.9099998474121094),
            (-0.731843113899231, -0.01497584581375122, 0.9099998474121094),
            (-0.9012876152992249, -0.01497584581375122, 0.9099998474121094),
            (-0.7318429946899414, 0.01419079303741455, 0.9099998474121094),
            (-0.9012874960899353, 0.01419079303741455, 0.9099998474121094),
            (-0.7318431735038757, -0.05507999658584595, 0.9349998235702515),
            (-0.9137876033782959, -0.05507999658584595, 0.9474998712539673),
            (-0.7318429350852966, 0.05429494380950928, 0.9349998235702515),
            (-0.9137873649597168, 0.05429494380950928, 0.9474998712539673),
            (-0.731843113899231, -0.01497584581375122, 0.9349998235702515),
            (-0.9137875437736511, -0.01497584581375122, 0.9474998712539673),
            (-0.7318429946899414, 0.01419079303741455, 0.9349998235702515),
            (-0.9137874841690063, 0.01419079303741455, 0.9474998712539673),
            (-0.9360098242759705, -0.050067007541656494, 0.9099998474121094),
            (-0.9360095858573914, 0.049281954765319824, 0.9099998474121094),
            (-0.9360098242759705, -0.01998889446258545, 0.9099998474121094),
            (-0.9360097050666809, 0.01920384168624878, 0.9099998474121094),
            (1.3859760761260986, 0.13768048584461212, 0.8933309316635132),
            (1.3859760761260986, -0.14259295165538788, 0.8933309316635132),
            (1.3846806287765503, 0.22106601297855377, 0.876662015914917),
            (1.3846806287765503, 0.22106601297855377, 0.5749953985214233),
            (1.3729618787765503, 0.20999182760715485, 0.5749953985214233),
            (1.4196739196777344, 0.021482229232788086, 0.9099998474121094),
            (1.4196739196777344, -0.022267818450927734, 0.9099998474121094),
            (1.3846805095672607, -0.22190271317958832, 0.876662015914917),
            (1.3846806287765503, -0.22190271317958832, 0.5749953985214233),
            (1.3729617595672607, -0.2108285278081894, 0.5749953985214233),
            (1.4073692560195923, 0.01054471731185913, 0.9424998760223389),
            (1.4073692560195923, -0.01133030652999878, 0.9424998760223389),
            (1.4532678127288818, 0.1238132119178772, 0.2812454104423523),
            (1.4082677364349365, 0.1238132119178772, 0.2812454104423523),
            (1.4532678127288818, -0.1246243417263031, 0.2812454104423523),
            (1.4532678127288818, 6.389617919921875e-05, 0.2624954283237457),
            (1.4082677364349365, -0.1246243417263031, 0.2812454104423523),
            (1.4082677364349365, 6.395578384399414e-05, 0.2624954283237457),
            (1.4532678127288818, -0.06601786613464355, 0.26874542236328125),
            (1.4532678127288818, 0.0652322769165039, 0.26874542236328125),
            (1.4082677364349365, -0.06601786613464355, 0.26874542236328125),
            (1.4082677364349365, 0.0652322769165039, 0.26874542236328125),
            (-1.0205999612808228, -0.00039249658584594727, 0.6545792818069458),
            (-1.0205999612808228, -0.2103661596775055, 0.6545792818069458),
            (-1.0205999612808228, 0.22106601297855377, 0.6504120826721191),
            (-1.0205999612808228, -0.22190271317958832, 0.6504120826721191),
            (1.4532678127288818, 0.22106601297855377, 0.6504120826721191),
            (1.4532678127288818, -0.22190271317958832, 0.6504120826721191),
            (-1.0205999612808228, -0.08712661266326904, 0.6545792818069458),
            (-1.0205999612808228, 0.08633524179458618, 0.6545792818069458),
            (1.3157678842544556, 0.22106601297855377, 0.6504120826721191),
            (1.1782677173614502, 0.22106601297855377, 0.6504120826721191),
            (1.3157678842544556, -0.22190271317958832, 0.6504120826721191),
            (1.178267478942871, -0.22190271317958832, 0.6504120826721191),
            (-0.7571526765823364, 0.22106601297855377, 0.6504120230674744),
            (-0.7571536302566528, -0.22190271317958832, 0.6504120826721191),
            (1.4532678127288818, -0.129116490483284, 0.6545792818069458),
            (1.4532678127288818, 0.12728002667427063, 0.6545792818069458),
            (1.4532678127288818, 0.05429476499557495, 0.6587464809417725),
            (1.4532678127288818, -0.0550803542137146, 0.6587464809417725),
            (1.3846806287765503, -0.22190271317958832, 0.6504120826721191),
            (1.3846806287765503, 0.22106601297855377, 0.6504120826721191),
            (-0.38537561893463135, -0.10562311112880707, 0.6545792818069458),
            (-0.38537561893463135, -0.000418052077293396, 0.6545792818069458),
            (-0.38537561893463135, 0.10478700697422028, 0.6545792818069458),
            (-0.38537561893463135, 0.20999206602573395, 0.5749953985214233),
            (-0.38537561893463135, -0.21082817018032074, 0.5749953985214233),
            (-0.38537561893463135, -0.10562311112880707, 0.5749953985214233),
            (-0.38537561893463135, -0.000418052077293396, 0.5749953985214233),
            (-0.38537561893463135, 0.10478700697422028, 0.5749953985214233),
           ]
    
    faces= [(75, 65, 12, 0, 20, 82),
            (38, 10, 7, 34),
            (8, 46, 117, 114),
            (74, 72, 35, 145),
            (103, 102, 37, 41),
            (72, 74, 62, 58),
            (73, 71, 55, 59),
            (144, 4, 36),
            (4, 144, 39, 40),
            (9, 145, 35),
            (5, 3, 111, 112),
            (46, 7, 113, 117),
            (3, 5, 41, 37),
            (3, 47, 118, 111),
            (22, 14, 51, 70),
            (17, 0, 12),
            (101, 99, 2, 33),
            (78, 95, 26, 27),
            (97, 1, 25, 44, 95),
            (96, 28, 18, 45),
            (104, 43, 2, 99),
            (51, 14, 13, 52),
            (63, 64, 13, 14),
            (59, 55, 56, 60),
            (108, 107, 57, 61),
            (61, 57, 58, 62),
            (144, 36, 71, 73),
            (105, 100, 6, 42),
            (106, 100, 15, 53),
            (65, 16, 15, 66),
            (53, 15, 16, 54),
            (105, 110, 68, 66),
            (109, 104, 64, 67),
            (68, 65, 66),
            (43, 104, 105, 42),
            (127, 44, 25, 121),
            (65, 75, 21, 16),
            (21, 69, 54, 16),
            (128, 45, 18, 40),
            (22, 76, 63, 14),
            (82, 91, 87, 75),
            (85, 86, 24, 23),
            (21, 75, 77),
            (20, 23, 83, 82),
            (23, 24, 84, 83),
            (75, 87, 77),
            (85, 93, 94, 86),
            (27, 26, 31),
            (80, 29, 28, 96),
            (91, 92, 88, 87),
            (89, 90, 94, 93),
            (91, 83, 84, 92),
            (89, 79, 80, 90),
            (91, 82, 83),
            (76, 89, 93, 81),
            (76, 79, 89),
            (81, 93, 85),
            (1, 97, 84, 24),
            (98, 1, 24, 86),
            (90, 96, 98, 94),
            (86, 94, 98),
            (90, 80, 96),
            (84, 97, 92),
            (88, 95, 78),
            (97, 95, 88, 92),
            (19, 26, 95, 44),
            (28, 32, 18),
            (123, 32, 70, 133),
            (133, 70, 51, 130),
            (131, 53, 54, 132),
            (139, 106, 53, 131),
            (125, 37, 102, 140),
            (129, 56, 55, 130),
            (124, 31, 19, 122),
            (134, 72, 58, 132),
            (40, 123, 36, 4),
            (124, 35, 72, 134),
            (125, 33, 2, 136),
            (63, 67, 64),
            (17, 67, 63),
            (68, 12, 65),
            (67, 17, 12, 68),
            (69, 21, 27, 31),
            (19, 31, 26),
            (77, 78, 27, 21),
            (32, 29, 22, 70),
            (22, 79, 76),
            (1, 98, 96, 45, 25),
            (29, 32, 28),
            (22, 29, 80, 79),
            (77, 87, 88, 78),
            (126, 30, 106, 139),
            (137, 43, 42, 138),
            (138, 42, 6, 135),
            (136, 137, 47, 3),
            (81, 85, 23, 20),
            (140, 102, 56, 129),
            (104, 109, 110, 105),
            (67, 68, 110, 109),
            (30, 6, 100, 106),
            (66, 15, 100, 105),
            (38, 34, 107, 108),
            (64, 104, 99, 13),
            (52, 13, 99, 101),
            (60, 56, 102, 103),
            (113, 115, 119, 117),
            (118, 120, 112, 111),
            (117, 119, 116, 114),
            (114, 116, 120, 118),
            (49, 5, 112, 120),
            (10, 48, 119, 115),
            (47, 8, 114, 118),
            (48, 11, 116, 119),
            (7, 10, 115, 113),
            (11, 49, 120, 116),
            (76, 81, 20, 0, 17, 63),
            (126, 135, 6, 30),
            (34, 7, 135, 126),
            (101, 140, 129, 52),
            (2, 43, 137, 136),
            (46, 138, 135, 7),
            (47, 137, 138, 46, 8),
            (34, 126, 139, 107),
            (37, 125, 136, 3),
            (31, 124, 134, 69),
            (18, 32, 123, 40),
            (69, 134, 132, 54),
            (19, 44, 127, 122),
            (35, 124, 122, 9),
            (52, 129, 130, 51),
            (33, 125, 140, 101),
            (107, 139, 131, 57),
            (57, 131, 132, 58),
            (71, 133, 130, 55),
            (45, 128, 121, 25),
            (36, 123, 133, 71),
            (145, 9, 122, 50),
            (50, 122, 127, 141),
            (121, 142, 141, 127),
            (128, 143, 142, 121),
            (40, 39, 143, 128),
            (141, 142, 147, 146),
            (143, 39, 144, 148),
            (142, 143, 148, 147),
            (50, 141, 146, 145),
           ]
    
    #Make the barrel object:
    s_mesh = bpy.data.meshes.new("slide")
    slide_obj = bpy.data.objects.new("Slide_Obj", s_mesh)

    scene = bpy.context.scene
    scene.objects.link(slide_obj)
    bm = bmesh.new()
    
    #Add verts, then faces:
    for v_co in verts:
        bm.verts.new(v_co)

    bm.verts.ensure_lookup_table()
    for f_idx in faces:
        bm.faces.new([bm.verts[i] for i in f_idx])
    
    top_index = [0, 1, 2, 6, 12, 13,
                 14, 15, 16, 17, 18, 19,
                 20, 21, 22, 23, 24, 25,
                 26, 27, 28, 29, 30, 31,
                 32, 33, 42, 43, 44, 45,
                 51, 52, 53, 54, 63, 64,
                 65, 66, 67, 68, 69, 70,
                 75, 76, 77, 78, 79, 80,
                 81, 82, 83, 84, 85, 86,
                 87, 88, 89, 90, 91, 92,
                 93, 94, 95, 96, 97, 98,
                 99, 100, 101, 104, 105, 106,
                 109, 110,
                ]
    
    loc = (0.0, 0.0, h_offset)
    slide_top = v_from_index(bm, top_index)
    #Move the top to the correct height:
    bmesh.ops.translate(bm, vec=loc, verts=slide_top)
    
    bm.verts.ensure_lookup_table()
    bm.edges.ensure_lookup_table()
    bm.faces.ensure_lookup_table()
    
    smooth_f_index= [0, 14, 15, 16, 17, 18,
                     19, 20, 21, 22, 27, 28,
                     29, 30, 34, 36, 37, 39,
                     41, 42, 43, 44, 47, 48,
                     57, 58, 65, 66, 82, 83,
                     84, 85, 86, 87, 88, 89,
                     95, 99, 100, 102, 103, 105,
                     106, 107, 108, 115,
                    ]
    
    for i in smooth_f_index:
        bm.faces[i].smooth = True
    
    #Move the front:
    vert_index= [0, 2, 3, 5, 6, 7,
                 8, 10, 11, 12, 13, 14,
                 15, 16, 17, 30, 33, 34,
                 37, 38, 41, 42, 43, 46,
                 47, 48, 49, 51, 52, 53,
                 54, 55, 56, 57, 58, 59,
                 60, 61, 62, 63, 64, 65,
                 66, 67, 68, 99, 100, 101,
                 102, 103, 104, 105, 106, 107,
                 108, 109, 110, 111, 112, 113,
                 114, 115, 116, 117, 118, 119,
                 120, 125, 126, 129, 130, 131,
                 132, 135, 136, 137, 138, 139,
                 140,]
    
    verts_geom = [bm.verts[i] for i in vert_index]
    loc = (front, 0.0, 0.0)
    bmesh.ops.translate(bm, vec=loc, verts=verts_geom)
    
    #Resize it the width:
    scl = (1.0, (0.454043 + w) / 0.454043, 1.0)
    loc = mathutils.Matrix.Translation((0.0, 0.0, 0.0))
    bmesh.ops.scale(bm, vec=scl, space=loc, verts=bm.verts)
    
    #Bevel it:
    if str > 0.0 and seg > 0:
        
        edge_index= [0, 2, 8, 9, 13, 14,
                     16, 20, 22, 27, 31, 32,
                     35, 37, 38, 39, 40, 42,
                     43, 44, 48, 52, 53, 55,
                     58, 60, 63, 66, 71, 74,
                     75, 79, 82, 86, 89, 91,
                     95, 96, 100, 104, 106, 107,
                     108, 110, 111, 112, 115, 116,
                     117, 123, 124, 129, 130, 131,
                     133, 137, 140, 142, 143, 144,
                     145, 146, 149, 152, 153, 154,
                     155, 156, 157, 158, 159, 160,
                     161, 162, 163, 164, 165, 166,
                     167, 169, 170, 172, 173, 174,
                     175, 176, 177, 178, 181, 183,
                     184, 194, 200, 201, 207, 209,
                     211, 214, 217, 218, 220, 224,
                     226, 227, 238, 239, 240, 242,
                     244, 246, 247, 248, 249, 250,
                     251, 252, 253, 254, 257, 265,
                     272, 273, 276,
                    ]

        vert_index= [2, 3, 4, 5, 6, 7,
                     9, 10, 12, 17, 18, 19,
                     25, 30, 31, 32, 33, 34,
                     35, 36, 37, 40, 42, 43,
                     44, 45, 51, 52, 53, 54,
                     55, 56, 57, 58, 63, 64,
                     65, 66, 67, 68, 69, 70,
                     71, 72, 74, 75, 76, 77,
                     78, 79, 80, 81, 82, 83,
                     84, 85, 86, 87, 88, 89,
                     90, 91, 92, 93, 94, 95,
                     96, 97, 98, 101, 102, 104,
                     105, 106, 107, 109, 110, 111,
                     112, 113, 114, 115, 116, 117,
                     118, 119, 120, 121, 122, 123,
                     124, 125, 126, 127, 128, 145,
                    ]
        
        edge_geom = [bm.edges[i] for i in edge_index]
        vert_geom = [bm.verts[i] for i in vert_index]
        
        new_geom = bmesh.ops.bevel(bm, 
                                   geom=vert_geom[:] + edge_geom[:], 
                                   offset=str, 
                                   offset_type=0, 
                                   segments=seg, 
                                   profile=0.5, 
                                   clamp_overlap=True,)
        #Smooth the beveled geometry:
        for f in new_geom["faces"]:
            f.smooth = True
        
    
    #Finalize changes:
    bm.to_mesh(s_mesh)
    bm.free()
    s_mesh.update()
    
    #Return slide_obj so that the 
    #ejection port can boolean it
    return slide_obj

def make_ejection_port(slide_obj, x, y, l, w, h, z_offset, w1):
    #This bm will be booleaned out of the slide,
    #and will then be deleted after applying it.
    
    #Basic geometry:
    verts= [(x - l, y - w, 0.9125 - h + z_offset),
            (x - l, y - w, 0.9125 + z_offset),
            (x - l, y + w, 0.9125 - h + z_offset),
            (x - l, y + w, 0.9125 + z_offset),
            (x + l, y - w, 0.9125 - h + z_offset),
            (x + l, y - w, 0.9125 + z_offset),
            (x + l, y + w, 0.9125 - h + z_offset),
            (x + l, y + w, 0.9125 + z_offset),
           ]
           
    faces= [(0, 1, 3, 2),
            (2, 3, 7, 6),
            (6, 7, 5, 4),
            (4, 5, 1, 0),
            (2, 6, 4, 0),
            (7, 3, 1, 5),
           ]
    
    #Make the barrel object:
    ep_mesh = bpy.data.meshes.new("ejection_port")
    ejection_port_obj = bpy.data.objects.new("Ejection_Port_Obj", ep_mesh)

    scene = bpy.context.scene
    scene.objects.link(ejection_port_obj)
    bm = bmesh.new()
    
    #Add verts, then faces:
    for v_co in verts:
        bm.verts.new(v_co)

    bm.verts.ensure_lookup_table()
    for f_idx in faces:
        bm.faces.new([bm.verts[i] for i in f_idx])
    
    #Resize the width:
    scl = (1.0, (1.0 + w1) / 1.0, 1.0)
    loc = mathutils.Matrix.Translation(get_center(bm))
    bmesh.ops.scale(bm, vec=scl, space=loc, verts=bm.verts)
    
    #Finalize changes:
    bm.to_mesh(ep_mesh)
    bm.free()
    ep_mesh.update()
    
    #Boolean it out of the slide:
    bpy.ops.object.select_all(action='DESELECT')
    ejection_port_obj.select = True
    bpy.context.scene.objects.active = slide_obj
    slide_obj.data = slide_obj.data.copy()
    cut = slide_obj.modifiers.new("cut_hole", type='BOOLEAN')
    cut.operation = 'DIFFERENCE'
    cut.object = ejection_port_obj
    bpy.ops.object.modifier_apply(apply_as='DATA', modifier=cut.name)
    bpy.ops.object.select_all(action='DESELECT')
    ejection_port_obj.select = True
    bpy.ops.object.delete()
    
    return ejection_port_obj

def make_barrel(slide_obj, str, seg, cyl_seg, l, rad, thick, height, z_offset):
    #Make the barrel object:
    bl_mesh = bpy.data.meshes.new("barrel")
    barrel_obj = bpy.data.objects.new("Barrel_Obj", bl_mesh)

    scene = bpy.context.scene
    scene.objects.link(barrel_obj)
    bm = bmesh.new()
    
    #Make the cylinder geometry:
    bmesh.ops.create_cone(bm, 
                          cap_ends=True, 
                          cap_tris=False, 
                          segments=cyl_seg, 
                          diameter1=rad, 
                          diameter2=rad, 
                          depth= l + 1.4875)
    
    #Rotate it, then move it:
    loc = (((l + 1.4875) / 2.0), 0.0, (height / 1.325) + z_offset)
    rot = mathutils.Matrix.Rotation(math.radians(90.0), 3, 'Y')
    
    bmesh.ops.rotate(bm,
                     verts=bm.verts[:],
                     cent=(0.0, 1.0, 0.0),
                     matrix=rot)
    
    bmesh.ops.translate(bm, vec=loc, verts=bm.verts[:])
    
    #Smooth it:
    for f in bm.faces:
        f.smooth = True
    #Except the front face:
    flats = flat_faces(bm.faces, "X", "+")
    for f in flats:
        f.smooth = False
    
    #Bevel the front face:
    edge_geom = []
    for f in flats:
        edge_geom += [e for e in f.edges]
    vert_geom = verts_from_edges(edge_geom)
    
    if str > 0.0 and seg > 0:
        new_geom = bmesh.ops.bevel(bm, 
                                   geom=vert_geom[:] + edge_geom[:], 
                                   offset=str, 
                                   offset_type=0, 
                                   segments=seg, 
                                   profile=0.5, 
                                   clamp_overlap=True,)
        #Smooth the beveled geometry:
        for f in new_geom["faces"]:
            f.smooth = True
    
    #Finalize changes:
    bm.to_mesh(bl_mesh)
    bm.free()
    bl_mesh.update()
    
    #Boolean it out of the slide:
    bpy.ops.object.select_all(action='DESELECT')
    barrel_obj.select = True
    bpy.context.scene.objects.active = slide_obj
    slide_obj.data = slide_obj.data.copy()
    cut = slide_obj.modifiers.new("cut_hole", type='BOOLEAN')
    cut.operation = 'DIFFERENCE'
    cut.object = barrel_obj
    bpy.ops.object.modifier_apply(apply_as='DATA', modifier=cut.name)
    bpy.ops.object.select_all(action='DESELECT')
    barrel_obj.select = True
    bpy.context.scene.objects.active = barrel_obj
    
    #Move it back and apply location change:
    bpy.ops.transform.translate(value=(-0.025, 0.0, 0), 
                                       constraint_axis=(True, False, False))
    bpy.ops.object.transform_apply(location=True, rotation=True, scale=True)
    bpy.ops.object.select_all(action='DESELECT')
    
    #Make the inner barrel cylinder:
    bl_cut_mesh = bpy.data.meshes.new("barrel_cut")
    barrel_cut_obj = bpy.data.objects.new("Barrel_Cut_Obj", bl_cut_mesh)

    scene = bpy.context.scene
    scene.objects.link(barrel_cut_obj)
    bm = bmesh.new()
    
    #Make the cylinder geometry:
    bmesh.ops.create_cone(bm, 
                          cap_ends=True, 
                          cap_tris=False, 
                          segments=cyl_seg, 
                          diameter1=rad-thick, 
                          diameter2=rad-thick, 
                          depth=l + 1.4875)
    #The depth value above is a little bit
    #larger to make the boolean work right
    
    #Rotate it, then move it:
    loc = (((l + 1.4875) / 2.0), 0.0, (height / 1.325) + z_offset)
    rot = mathutils.Matrix.Rotation(math.radians(90.0), 3, 'Y')
    
    bmesh.ops.rotate(bm,
                     verts=bm.verts[:],
                     cent=(0.0, 1.0, 0.0),
                     matrix=rot)
    
    bmesh.ops.translate(bm, vec=loc, verts=bm.verts[:])
    
    #Smooth it:
    for f in bm.faces:
        f.smooth = True
    
    #Finalize changes:
    bm.to_mesh(bl_cut_mesh)
    bm.free()
    bl_cut_mesh.update()
    
    #Boolean it out:
    bpy.ops.object.select_all(action='DESELECT')
    barrel_cut_obj.select = True
    bpy.context.scene.objects.active = barrel_obj
    barrel_obj.data = barrel_obj.data.copy()
    cut = barrel_obj.modifiers.new("cut_hole", type='BOOLEAN')
    cut.operation = 'DIFFERENCE'
    cut.object = barrel_cut_obj
    bpy.ops.object.modifier_apply(apply_as='DATA', modifier=cut.name)
    bpy.ops.object.select_all(action='DESELECT')
    barrel_cut_obj.select = True
    bpy.ops.object.delete()
    
    return barrel_obj

def make_chamber(str, seg, x, l, w, h, z_offset, w1):
    
    #Basic geometry:
    verts= [(x + l, -0.12170795351266861, 0.8884559273719788 + z_offset),
            (x - l, -0.12170792371034622, 0.8884559273719788 + z_offset),
            (x + l, -0.20672009885311127, 0.8103495836257935 + z_offset),
            (x - l, -0.20672009885311127, 0.8103495836257935 + z_offset),
            (x + l, -0.20672009885311127, 0.8726204037666321 + z_offset),
            (x - l, -0.20672009885311127, 0.8726204037666321 + z_offset),
            (x + l, -0.06509780138731003, 0.900332510471344 + z_offset),
            (x - l, -0.06509777158498764, 0.900332510471344 + z_offset),
            (x + l, -0.20672009885311127, 0.750578761100769 + z_offset),
            (x - l, -0.20672009885311127, 0.750578761100769 + z_offset),
            (x + l, -0.20672012865543365, 0.5755787491798401 + z_offset),
            (x - l, -0.20672009885311127, 0.5755787491798401 + z_offset),
            (x + l, 0.135041281580925, 0.8884559273719788 + z_offset),
            (x - l, 0.1350412517786026, 0.8884559273719788 + z_offset),
            (x + l, 0.19505341351032257, 0.8103495836257935 + z_offset),
            (x - l, 0.19505341351032257, 0.8103495836257935 + z_offset),
            (x + l, 0.19505341351032257, 0.8726204037666321 + z_offset),
            (x - l, 0.19505341351032257, 0.8726204037666321 + z_offset),
            (x + l, 0.078431136906147, 0.900332510471344 + z_offset),
            (x - l, 0.07843110710382462, 0.900332510471344 + z_offset),
            (x + l, 0.19505341351032257, 0.750578761100769 + z_offset),
            (x - l, 0.19505341351032257, 0.750578761100769 + z_offset),
            (x + l, 0.006666665896773338, 0.9053325057029724 + z_offset),
            (x - l, 0.006666665896773338, 0.9053325057029724 + z_offset),
            (x - l, 0.006666665896773338, 0.750578761100769 + z_offset),
            (x + l, 0.006666665896773338, 0.750578761100769 + z_offset),
            (x + l, 0.19505344331264496, 0.5755787491798401 + z_offset),
            (x - l, 0.19505341351032257, 0.5755787491798401 + z_offset),
            (x - l, 0.006666665896773338, 0.5755787491798401 + z_offset),
            (x + l, 0.006666665896773338, 0.5755787491798401 + z_offset),
           ]
           
    faces= [(6, 22, 23, 7),
            (7, 1, 0, 6),
            (4, 0, 1, 5),
            (2, 4, 5, 3),
            (8, 2, 3, 9),
            (7, 23, 24),
            (9, 3, 24),
            (5, 1, 24),
            (3, 5, 24),
            (1, 7, 24),
            (2, 8, 25),
            (0, 4, 25),
            (22, 6, 25),
            (4, 2, 25),
            (6, 0, 25),
            (25, 8, 10, 29),
            (9, 24, 28, 11),
            (8, 9, 11, 10),
            (10, 11, 28, 29),
            (18, 19, 23, 22),
            (19, 18, 12, 13),
            (16, 17, 13, 12),
            (14, 15, 17, 16),
            (20, 21, 15, 14),
            (19, 24, 23),
            (21, 24, 15),
            (17, 24, 13),
            (15, 24, 17),
            (13, 24, 19),
            (14, 25, 20),
            (12, 25, 16),
            (22, 25, 18),
            (16, 25, 14),
            (18, 25, 12),
            (25, 29, 26, 20),
            (21, 27, 28, 24),
            (20, 26, 27, 21),
            (26, 29, 28, 27),
           ]
    
    #Make the chamber object:
    c_mesh = bpy.data.meshes.new("chamber")
    chamber_obj = bpy.data.objects.new("Chamber_Obj", c_mesh)

    scene = bpy.context.scene
    scene.objects.link(chamber_obj)
    bm = bmesh.new()
    
    #Add verts, then faces:
    for v_co in verts:
        bm.verts.new(v_co)

    bm.verts.ensure_lookup_table()
    for f_idx in faces:
        bm.faces.new([bm.verts[i] for i in f_idx])
    
    #Resize width:
    loc = mathutils.Matrix.Translation(get_center(bm))
    scl = (1.0, ((w * 2.0) / 0.401774), 1.0)
    bmesh.ops.scale(bm, vec=scl, space=loc, verts=bm.verts)
    
    bm.verts.ensure_lookup_table()
    bm.edges.ensure_lookup_table()
    bm.faces.ensure_lookup_table()
    
    #Smooth the faces:
    smooth_f_index = [0, 1, 2, 19, 20, 21,]
    for i in smooth_f_index:
        bm.faces[i].smooth = True
    
    #Resize it the width:
    scl = (1.0, (1.0 + w1) / 1.0, 1.0)
    loc = mathutils.Matrix.Translation((0.0, 0.0, 0.0))
    bmesh.ops.scale(bm, vec=scl, space=loc, verts=bm.verts)
    
    #Bevel it:
    edge_index = [7, 43,]
    edge_geom = [bm.edges[i] for i in edge_index]

    vert_index = [4, 5, 16, 17,]
    vert_geom = [bm.verts[i] for i in vert_index]
    
    if str > 0.0 and seg > 0:
        new_geom = bmesh.ops.bevel(bm, 
                                   geom=vert_geom[:] + edge_geom[:], 
                                   offset=str, 
                                   offset_type=0, 
                                   segments=seg, 
                                   profile=0.5, 
                                   clamp_overlap=True,)
        #Smooth the new geometry:
        for f in new_geom["faces"]:
            f.smooth = True
    
    #Finalize changes:
    bm.to_mesh(c_mesh)
    bm.free()
    c_mesh.update()
    
    return chamber_obj

def make_recoil_spring(slide_obj, str, seg, length, rad, height, cyl_seg):
    #Make the recoil spring object:
    rs_mesh = bpy.data.meshes.new("recoil_spring")
    recoil_spring_obj = bpy.data.objects.new("Recoil_Spring_Obj", rs_mesh)

    scene = bpy.context.scene
    scene.objects.link(recoil_spring_obj)
    bm = bmesh.new()
    
    bmesh.ops.create_cone(bm, 
                          cap_ends=True, 
                          cap_tris=False, 
                          segments=cyl_seg, 
                          diameter1=rad, 
                          diameter2=rad, 
                          depth=length + 1.4575,)
    
    #Rotate, then move it:
    loc = (((length + 1.4575) / 2.0), 0.0, height / 2.75)
    rot = mathutils.Matrix.Rotation(math.radians(90.0), 3, 'Y')
    center = get_center(bm)
    bmesh.ops.rotate(bm,
                     verts=bm.verts[:],
                     cent=center,
                     matrix=rot)
                     
    bmesh.ops.translate(bm,
                        verts=bm.verts,
                        vec=loc)
    
    #Smooth the whole thing:
    for f in bm.faces:
        f.smooth = True
    
    #Except this:
    flats = flat_faces(bm.faces, "X", "+")
    
    for f in flats:
        f.smooth = False
    
    #Finalize changes:
    bm.to_mesh(rs_mesh)
    bm.free()
    rs_mesh.update()
    
    #Boolean it out:
    bpy.ops.object.select_all(action='DESELECT')
    recoil_spring_obj.select = True
    bpy.context.scene.objects.active = slide_obj
    slide_obj.data = slide_obj.data.copy()
    cut = slide_obj.modifiers.new("cut_hole", type='BOOLEAN')
    cut.operation = 'DIFFERENCE'
    cut.object = recoil_spring_obj
    bpy.ops.object.modifier_apply(apply_as='DATA', modifier=cut.name)
    bpy.ops.object.select_all(action='DESELECT')
    recoil_spring_obj.select = True
    
    #Return to the mesh, to 
    #make finishing changes
    bm = bmesh.new()
    bm.from_mesh(recoil_spring_obj.data)
    
    #Bevel it:
    if str > 0.0 and seg > 0:
        bev_edges = get_e_in_bounds(bm.edges, 
                                    length, 
                                    0.0, 
                                    height, 
                                    0.00125, 
                                    rad, 
                                    rad)
                                    
        bmesh.ops.bevel(bm, 
                        geom=bev_edges, 
                        offset=str, 
                        offset_type=0, 
                        segments=seg, 
                        profile=0.5, 
                        clamp_overlap=True,)
    
    #Finalize changes:
    bm.to_mesh(rs_mesh)
    bm.free()
    rs_mesh.update()
    
    return recoil_spring_obj

def make_frame(str, seg, front, shift, w):
    #Basic geometry:
    verts= [(-0.9195341467857361, -0.2188262790441513, -0.8798978328704834),
            (-0.9502432346343994, 0.13700689375400543, 0.26336342096328735),
            (-1.0289409160614014, 0.13602499663829803, -0.8600969314575195),
            (-1.0307825803756714, -0.13480405509471893, -0.8596720695495605),
            (-1.0578320026397705, 0.0007674547377973795, -0.8509761095046997),
            (-0.9520801901817322, -0.13382209837436676, 0.2638123631477356),
            (-0.976415753364563, 0.0018896462861448526, 0.26283755898475647),
            (-0.3030817210674286, -0.0043716877698898315, -0.8993992209434509),
            (-0.31563833355903625, 0.16331933438777924, -0.8993992209434509),
            (-0.31748026609420776, -0.17000870406627655, -0.8993992209434509),
            (-0.3286724388599396, 0.21799005568027496, -0.8993991613388062),
            (-0.9172539710998535, 0.21799005568027496, -0.8811135292053223),
            (-0.4526387155056, 0.21799005568027496, -0.9006437063217163),
            (-0.4577425718307495, -0.2188262790441513, -0.8993991613388062),
            (-0.3314012289047241, -0.2188262790441513, -0.8993991613388062),
            (-0.8891498446464539, -0.19088684022426605, -0.9547184109687805),
            (-0.9670966267585754, 0.12571080029010773, -0.9547184109687805),
            (-1.0005271434783936, 0.21799005568027496, -0.8691072463989258),
            (-1.0032557249069214, -0.2188262790441513, -0.8684782981872559),
            (-0.4541965126991272, 0.19154612720012665, -0.9547184109687805),
            (-0.34570953249931335, 0.15318234264850616, -0.9547184109687805),
            (-0.9272682666778564, -0.2188262790441513, 0.26467061042785645),
            (-0.9245469570159912, 0.21799005568027496, 0.2640058994293213),
            (-1.0205999612808228, 0.1370488554239273, 0.3068428039550781),
            (1.440767765045166, 0.13631321489810944, 0.657495379447937),
            (-1.0103756189346313, 0.1515575796365738, 0.657495379447937),
            (-1.0205999612808228, 0.15733392536640167, 0.535412073135376),
            (-1.0103756189346313, 0.14944691956043243, 0.535412073135376),
            (1.440767765045166, 0.13631321489810944, 0.535412073135376),
            (-0.9670966267585754, -0.124900683760643, -0.9547184109687805),
            (-0.9670966267585754, 0.0005642175674438477, -0.9547184109687805),
            (-0.34726858139038086, -0.1590554267168045, -0.9547184109687805),
            (-0.33448588848114014, -0.004310861229896545, -0.9547184109687805),
            (-1.0205999612808228, -0.13378013670444489, 0.30729180574417114),
            (-1.0205999612808228, 0.0019375979900360107, 0.3076140880584717),
            (1.440767765045166, -0.13712434470653534, 0.657495379447937),
            (-1.0103756189346313, -0.15236814320087433, 0.657495379447937),
            (-1.0103756189346313, -0.00039252638816833496, 0.657495379447937),
            (-1.0205999612808228, -0.1581445187330246, 0.535412073135376),
            (-1.0205999612808228, -0.00039252638816833496, 0.535412073135376),
            (-1.0103756189346313, -0.15025757253170013, 0.535412073135376),
            (-1.0103756189346313, -0.00039258599281311035, 0.535412073135376),
            (1.440767765045166, -0.13712434470653534, 0.535412073135376),
            (0.9581657648086548, 6.633996963500977e-05, 0.25157880783081055),
            (0.9581657648086548, 0.13631321489810944, 0.2703287899494171),
            (0.9581657648086548, -0.13712434470653534, 0.2703287899494171),
            (-1.0513083934783936, -0.07479143142700195, -0.8530949354171753),
            (-1.050370454788208, 0.07624784857034683, -0.8533115386962891),
            (-0.3059821128845215, 0.11046655476093292, -0.8993992209434509),
            (-0.3069201111793518, -0.11869645118713379, -0.8993992209434509),
            (-0.29697278141975403, -0.00440526008605957, -0.9079199433326721),
            (-0.30950674414634705, 0.16329534351825714, -0.9079199433326721),
            (-1.051998257637024, 0.0007482916116714478, -0.9079199433326721),
            (-1.0251301527023315, -0.1348208338022232, -0.9079199433326721),
            (-0.4438519775867462, 0.21799005568027496, -0.9079198837280273),
            (-1.0232832431793213, 0.13600821793079376, -0.9079199433326721),
            (-0.3113538324832916, -0.17003269493579865, -0.9079199433326721),
            (-0.9138822555541992, -0.2188262790441513, -0.9079198837280273),
            (-0.45671510696411133, -0.19088684022426605, -0.9547184109687805),
            (-0.667050838470459, -0.19088684022426605, -0.9547184109687805),
            (-0.8866491913795471, 0.19154612720012665, -0.9547184109687805),
            (-0.6645535230636597, 0.19154612720012665, -0.9547184109687805),
            (-0.5701941251754761, 0.21799005568027496, 0.29860612750053406),
            (-0.5639611482620239, -0.2188262790441513, 0.2992708384990692),
            (-0.6345415711402893, 0.20999206602573395, 0.657495379447937),
            (-0.6345424056053162, -0.21082822978496552, 0.657495379447937),
            (-0.6345424056053162, -0.2188262790441513, 0.535412073135376),
            (-0.6345415711402893, 0.21799005568027496, 0.535412073135376),
            (-0.6345424056053162, -0.2079058736562729, 0.535412073135376),
            (-0.6345415711402893, 0.20706965029239655, 0.535412073135376),
            (-0.9112582206726074, 0.21799005568027496, -0.9079198837280273),
            (-0.6721487045288086, 0.21799005568027496, -0.9079198837280273),
            (-0.4471820890903473, -0.2188262790441513, -0.9079198837280273),
            (-0.6752444505691528, -0.2188262790441513, -0.9079198837280273),
            (-0.19124996662139893, 0.09230838716030121, 0.2703287899494171),
            (0.17996978759765625, -0.12575651705265045, 0.2703287899494171),
            (-0.1025381088256836, -0.12219113111495972, 0.2703287899494171),
            (-0.09995031356811523, -0.0010844171047210693, 0.25157880783081055),
            (0.18060779571533203, -0.0007571876049041748, 0.25157880783081055),
            (-0.10064804553985596, 0.11999382078647614, 0.2703287899494171),
            (0.18102848529815674, 0.1242421418428421, 0.2703287899494171),
            (-0.19261062145233154, -0.09518864750862122, 0.2703287899494171),
            (-0.9705700278282166, -0.073704294860363, 0.2631395757198334),
            (-0.969634473323822, 0.07733496278524399, 0.26291072368621826),
            (-0.9424505233764648, 0.0018067474011331797, 0.18398112058639526),
            (-0.9179190993309021, -0.1338946372270584, 0.187198206782341),
            (-0.9160822629928589, 0.13693438470363617, 0.18674923479557037),
            (-0.9670966267585754, -0.19088684022426605, -0.9547184109687805),
            (-0.9670966267585754, 0.19154612720012665, -0.9547184109687805),
            (-0.35378068685531616, -0.19088684022426605, -0.9547183513641357),
            (-0.3520030975341797, 0.19154612720012665, -0.9547184109687805),
            (-1.0205999612808228, -0.2188262790441513, 0.30685287714004517),
            (-1.0205999612808228, 0.21799005568027496, 0.30618816614151),
            (-0.2058866024017334, 0.21799005568027496, 0.2953287959098816),
            (-0.20860791206359863, -0.2188262790441513, 0.2953287959098816),
            (1.440767765045166, -0.2108285278081894, 0.657495379447937),
            (-1.0103756189346313, -0.21082817018032074, 0.657495379447937),
            (-1.0103756189346313, 0.20999206602573395, 0.657495379447937),
            (1.440767765045166, 0.20999182760715485, 0.657495379447937),
            (-1.0205999612808228, -0.2188262790441513, 0.535412073135376),
            (-1.0205999612808228, 0.21799005568027496, 0.535412073135376),
            (1.440767765045166, -0.207906112074852, 0.535412073135376),
            (-1.0103756189346313, -0.2079058140516281, 0.535412073135376),
            (-1.0103756189346313, 0.20706965029239655, 0.535412073135376),
            (1.440767765045166, 0.20706941187381744, 0.535412073135376),
            (-0.9670966267585754, -0.06955479085445404, -0.9547184109687805),
            (-0.9670966267585754, 0.07059495151042938, -0.9547184109687805),
            (-0.3381090462207794, -0.11386357247829437, -0.9547184109687805),
            (-0.3372158706188202, 0.10587675869464874, -0.9547184109687805),
            (-1.0205999612808228, -0.07365782558917999, 0.30759182572364807),
            (-1.0205999612808228, 0.07738139480352402, 0.30736297369003296),
            (-1.0103756189346313, -0.08514423668384552, 0.657495379447937),
            (-1.0103756189346313, 0.08435280621051788, 0.657495379447937),
            (-1.0205999612808228, -0.08836568892002106, 0.535412073135376),
            (-1.0205999612808228, 0.08757422864437103, 0.535412073135376),
            (-1.0103756189346313, -0.08396722376346588, 0.535412073135376),
            (-1.0103756189346313, 0.0831756740808487, 0.535412073135376),
            (0.9581657648086548, 0.21799005568027496, 0.2953287959098816),
            (0.9581657648086548, -0.2188262790441513, 0.2953287959098816),
            (0.9581657648086548, 0.20999188721179962, 0.657495379447937),
            (1.3157678842544556, 0.209991917014122, 0.657495379447937),
            (1.3157678842544556, -0.2108285278081894, 0.657495379447937),
            (0.9581657648086548, -0.21082843840122223, 0.657495379447937),
            (0.9581657648086548, -0.2188265174627304, 0.535412073135376),
            (0.9581657648086548, 0.2179899364709854, 0.535412073135376),
            (1.3157678842544556, -0.207906112074852, 0.535412073135376),
            (0.9581657648086548, -0.20790602266788483, 0.535412073135376),
            (0.9581657648086548, 0.2070695012807846, 0.535412073135376),
            (1.3157678842544556, 0.20706941187381744, 0.535412073135376),
            (0.9581657648086548, 0.0652322918176651, 0.25782880187034607),
            (0.9581657648086548, -0.06601786613464355, 0.25782880187034607),
            (-0.9950470328330994, 0.21799005568027496, -0.9079198837280273),
            (-0.9977831840515137, -0.2188262790441513, -0.9079198837280273),
            (-0.32251960039138794, 0.21799005568027496, -0.9079198837280273),
            (-0.32525599002838135, -0.2188262790441513, -0.9079198837280273),
            (-1.0455206632614136, -0.07480999827384949, -0.9079199433326721),
            (-1.044580101966858, 0.0762292891740799, -0.9079199433326721),
            (-0.29986682534217834, 0.11043541133403778, -0.9079199433326721),
            (-0.30080747604370117, -0.11872763931751251, -0.9079199433326721),
            (-0.5649863481521606, -0.19088684022426605, -0.9547184109687805),
            (-0.7660515904426575, -0.19088684022426605, -0.9547184109687805),
            (-0.7635546922683716, 0.19154612720012665, -0.9547184109687805),
            (-0.5624787211418152, 0.19154612720012665, -0.9547184109687805),
            (-0.7023463249206543, 0.21799005568027496, 0.29860612750053406),
            (-0.7023463249206543, -0.2188262790441513, 0.2992708384990692),
            (-0.7696526646614075, 0.20999206602573395, 0.657495379447937),
            (-0.7696534991264343, -0.21082822978496552, 0.657495379447937),
            (-0.7696534991264343, -0.2188262790441513, 0.535412073135376),
            (-0.7696526646614075, 0.21799005568027496, 0.535412073135376),
            (-0.7696534991264343, -0.2079058736562729, 0.535412073135376),
            (-0.7696526646614075, 0.20706965029239655, 0.535412073135376),
            (-0.7864697575569153, 0.21799005568027496, -0.9079198837280273),
            (-0.5545307397842407, 0.21799005568027496, -0.9079198837280273),
            (-0.5579498410224915, -0.2188262790441513, -0.9079198837280273),
            (-0.7891829013824463, -0.2188262790441513, -0.9079198837280273),
            (-0.18739688396453857, -0.0014401376247406006, 0.25782880187034607),
            (0.1795964241027832, -0.2188262790441513, 0.2953287959098816),
            (-0.10262393951416016, -0.2188262790441513, 0.2953287959098816),
            (-0.09970378875732422, 0.21799005568027496, 0.2953287959098816),
            (0.1811845302581787, 0.21799005568027496, 0.2953287959098816),
            (0.13248446583747864, -0.21082834899425507, 0.657495379447937),
            (-0.18140438199043274, -0.2108282893896103, 0.657495379447937),
            (-0.18140318989753723, 0.20999200642108917, 0.657495379447937),
            (0.13248562812805176, 0.20999197661876678, 0.657495379447937),
            (-0.18140318989753723, 0.21799005568027496, 0.535412073135376),
            (0.13248561322689056, 0.2179899960756302, 0.535412073135376),
            (0.13248446583747864, -0.21882639825344086, 0.535412073135376),
            (-0.18140439689159393, -0.21882633864879608, 0.535412073135376),
            (-0.18140318989753723, 0.20706962049007416, 0.535412073135376),
            (0.13248562812805176, 0.20706959068775177, 0.535412073135376),
            (0.13248448073863983, -0.20790596306324005, 0.535412073135376),
            (-0.18140438199043274, -0.20790593326091766, 0.535412073135376),
            (0.1808452606201172, 0.061742499470710754, 0.25782880187034607),
            (-0.10094571113586426, 0.05652149021625519, 0.25782880187034607),
            (-0.10184824466705322, -0.058711692690849304, 0.25782880187034607),
            (0.18031597137451172, -0.06325685977935791, 0.25782880187034607),
            (-0.892911434173584, -0.2188262790441513, 0.1902986764907837),
            (-0.8901902437210083, 0.21799005568027496, 0.18963396549224854),
            (-0.936555802822113, -0.07378460466861725, 0.18484368920326233),
            (-0.9356203079223633, 0.07725466042757034, 0.18461483716964722),
            (-0.769831657409668, -0.2188262790441513, -0.9547183513641357),
            (-0.8957700133323669, -0.2188262790441513, -0.9547183513641357),
            (-0.9834876656532288, -0.2188262790441513, -0.9547183513641357),
            (-1.0209877490997314, 0.07619212567806244, -0.9547184109687805),
            (-1.0084877014160156, 0.13597466051578522, -0.9547184109687805),
            (-0.9834876656532288, 0.21799005568027496, -0.9547183513641357),
            (-0.5601090788841248, 0.21799005568027496, -0.9547183513641357),
            (-0.4487956762313843, 0.21799005568027496, -0.9547183513641357),
            (-0.33435729146003723, 0.21799005568027496, -0.9547183513641357),
            (-0.31206148862838745, 0.11037303507328033, -0.9547184109687805),
            (-0.32154881954193115, 0.16324739158153534, -0.9547184109687805),
            (-1.0084877014160156, -0.13485439121723175, -0.9547184109687805),
            (-1.0209877490997314, -0.07484717667102814, -0.9547184109687805),
            (-1.0272377729415894, 0.00070992112159729, -0.9547184109687805),
            (-0.33707815408706665, -0.2188262790441513, -0.9547183513641357),
            (-0.3233853578567505, -0.17008067667484283, -0.9547184109687805),
            (-0.3129967451095581, -0.11878998577594757, -0.9547184109687805),
            (-0.3092164397239685, -0.004472404718399048, -0.9547184109687805),
            (-0.4515165388584137, -0.2188262790441513, -0.9547183513641357),
            (-0.5628299117088318, -0.2188262790441513, -0.9547183513641357),
            (-0.6678932905197144, -0.2188262790441513, -0.9547183513641357),
            (-0.8930492997169495, 0.21799005568027496, -0.9547183513641357),
            (-0.7671108841896057, 0.21799005568027496, -0.9547183513641357),
            (-0.6651724576950073, 0.21799005568027496, -0.9547183513641357),
            (-0.8783149719238281, -0.19088684022426605, -0.5735517740249634),
            (-0.9413328766822815, 0.12645277380943298, -0.5677568912506104),
            (-0.44336163997650146, 0.19154612720012665, -0.5855149030685425),
            (-0.3348746597766876, 0.15392433106899261, -0.5844920873641968),
            (-0.9413328766822815, -0.12415869534015656, -0.5673315525054932),
            (-0.9413328766822815, 0.001306191086769104, -0.5637392997741699),
            (-0.3364337086677551, -0.15831346809864044, -0.584068775177002),
            (-0.3236510157585144, -0.003568891203030944, -0.5808666944503784),
            (-0.4458802342414856, -0.19088684022426605, -0.584907054901123),
            (-0.6562159657478333, -0.19088684022426605, -0.5792288780212402),
            (-0.8758142590522766, 0.19154612720012665, -0.5741592645645142),
            (-0.6537186503410339, 0.19154612720012665, -0.5798361301422119),
            (-0.9413328766822815, -0.19088684022426605, -0.570952296257019),
            (-0.9413328766822815, 0.19154612720012665, -0.5715594291687012),
            (-0.34294581413269043, -0.19088684022426605, -0.5875376462936401),
            (-0.34116822481155396, 0.19154612720012665, -0.5881282091140747),
            (-0.9413328766822815, -0.06881283223628998, -0.5645829439163208),
            (-0.9413328766822815, 0.07133691757917404, -0.564799427986145),
            (-0.3272741734981537, -0.11312161386013031, -0.5816043615341187),
            (-0.32638099789619446, 0.10661874711513519, -0.5818270444869995),
            (-0.5541514754295349, -0.19088684022426605, -0.582066535949707),
            (-0.7552167177200317, -0.19088684022426605, -0.5763915777206421),
            (-0.7527198195457458, 0.19154612720012665, -0.5769988298416138),
            (-0.5516438484191895, 0.19154612720012665, -0.5826741456985474),
            (-0.19189560413360596, -0.0015541315078735352, 0.26336342096328735),
            (-0.21112677454948425, 0.16017268598079681, 0.26336342096328735),
            (-0.2138138711452484, -0.16320104897022247, 0.26336342096328735),
            (-0.19595471024513245, 0.09301450848579407, 0.26336342096328735),
            (-0.19729891419410706, -0.09610280394554138, 0.26336342096328735),
            (-0.1989889144897461, -0.0017338821198791265, 0.18398112058639526),
            (-0.2193891704082489, 0.15877851843833923, 0.18398112058639526),
            (-0.22202232480049133, -0.16204044222831726, 0.18398112058639526),
            (-0.20469114184379578, -0.09754420071840286, 0.18398112058639526),
            (-0.2033728063106537, 0.09412789344787598, 0.18398112058639526),
            (-0.7023463249206543, -0.2188262790441513, 0.26423487067222595),
            (-0.5639611482620239, -0.2188262790441513, 0.26379913091659546),
            (-0.7023463249206543, -0.2188262790441513, 0.18819282948970795),
            (-0.5639611482620239, -0.2188262790441513, 0.1860869824886322),
            (-0.7023463249206543, 0.21799005568027496, 0.2637917399406433),
            (-0.5701941251754761, 0.21799005568027496, 0.26357758045196533),
            (-0.7023463249206543, 0.21799005568027496, 0.1877496838569641),
            (-0.5701941251754761, 0.21799005568027496, 0.1858654022216797),
            (-0.22113919258117676, 0.21799005568027496, 0.2953287959098816),
            (-0.2237723469734192, -0.2188262790441513, 0.2953287959098816),
            (-0.22702234983444214, -0.2188262790441513, 0.2635812759399414),
            (-0.23452234268188477, -0.2188262790441513, 0.18503405153751373),
            (-0.2243891954421997, 0.21799005568027496, 0.26347050070762634),
            (-0.23188918828964233, 0.21799005568027496, 0.18492326140403748),
            (-0.9493508338928223, -0.13434934616088867, -0.3362368941307068),
            (-0.947511613368988, 0.1364796906709671, -0.3366738557815552),
            (-0.9751412868499756, 0.0012871010694652796, -0.33349746465682983),
            (-0.25103533267974854, -0.003052785061299801, -0.35770905017852783),
            (-0.2675137519836426, 0.16104891896247864, -0.35770905017852783),
            (-0.26975131034851074, -0.1660245656967163, -0.35770905017852783),
            (-0.9689321517944336, -0.0742880180478096, -0.3341256082057953),
            (-0.9679954051971436, 0.07675125449895859, -0.3343483805656433),
            (-0.9230836033821106, -0.2188262790441513, -0.3390897810459137),
            (-0.9203587174415588, 0.21799005568027496, -0.33973661065101624),
            (-0.2558056116104126, -0.10812032222747803, -0.35770905017852783),
            (-0.2546774744987488, 0.10229722410440445, -0.35770905017852783),
            (-0.8109402060508728, -0.2188262790441513, -0.3458525240421295),
            (-0.5108518600463867, -0.2188262790441513, -0.35665610432624817),
            (-0.28028079867362976, 0.21799005568027496, -0.35723796486854553),
            (-0.8098001480102539, 0.21799005568027496, -0.34668198227882385),
            (-0.5114164352416992, 0.21799005568027496, -0.3573891222476959),
            (-0.28296178579330444, -0.2188262790441513, -0.3571825325489044),
            (-0.9931613802909851, -0.1345009207725525, -0.5107153058052063),
            (-1.0257220268249512, -0.1346524953842163, -0.685193657875061),
            (-0.9913213849067688, 0.13632813096046448, -0.51114821434021),
            (-1.023881196975708, 0.13617655634880066, -0.6856225728988647),
            (-1.019371509552002, 0.0011138856643810868, -0.5059903860092163),
            (-1.0523518323898315, 0.0009406702010892332, -0.678483247756958),
            (-0.2683841288089752, -0.0034924193751066923, -0.5382724404335022),
            (-0.2482329159975052, -0.003932053688913584, -0.7188358306884766),
            (-0.283555269241333, 0.16180571913719177, -0.5382724404335022),
            (-0.2620967924594879, 0.1625625193119049, -0.7188358306884766),
            (-0.2856609523296356, -0.1673526167869568, -0.5382724404335022),
            (-0.264070600271225, -0.16868066787719727, -0.7188358306884766),
            (-1.0130575895309448, -0.07445582002401352, -0.507115364074707),
            (-1.0459330081939697, -0.07462362945079803, -0.6801051497459412),
            (-1.0121203660964966, 0.07658345252275467, -0.5073361396789551),
            (-1.0449955463409424, 0.07641565054655075, -0.6803238391876221),
            (-0.29641133546829224, 0.21799005568027496, -0.5379583835601807),
            (-0.2750419080257416, 0.21799005568027496, -0.7186788320541382),
            (-0.998615026473999, -0.2188262790441513, -0.692015528678894),
            (-0.9664742946624756, -0.2188262790441513, -0.5155526399612427),
            (-0.9958876967430115, 0.21799005568027496, -0.6926504373550415),
            (-0.9637482166290283, 0.21799005568027496, -0.5161935091018677),
            (-0.25238195061683655, -0.11517107486724854, -0.7188358306884766),
            (-0.27284377813339233, -0.11164569854736328, -0.5382724404335022),
            (-0.2513805627822876, 0.10774344205856323, -0.7188358306884766),
            (-0.27177900075912476, 0.10502032935619354, -0.5382724404335022),
            (-0.8833361864089966, -0.2188262790441513, -0.7018827199935913),
            (-0.8471382260322571, -0.2188262790441513, -0.5238676071166992),
            (-0.4754456579685211, -0.2188262790441513, -0.7184848785400391),
            (-0.4931487441062927, -0.2188262790441513, -0.5375704765319824),
            (-0.8814360499382019, 0.21799005568027496, -0.7029696702957153),
            (-0.8456180691719055, 0.21799005568027496, -0.5248258113861084),
            (-0.47223129868507385, 0.21799005568027496, -0.719558835029602),
            (-0.49182385206222534, 0.21799005568027496, -0.5384739637374878),
            (-0.2777547538280487, -0.2188262790441513, -0.7186603546142578),
            (-0.29910826683044434, -0.2188262790441513, -0.5379214286804199),
            (-0.25066882371902466, -0.2188262790441513, 0.004295170307159424),
            (-0.26681530475616455, -0.2188262790441513, -0.1764436960220337),
            (-0.550601601600647, 0.21799005568027496, 0.004780560731887817),
            (-0.5310090184211731, 0.21799005568027496, -0.17630431056022644),
            (-0.7381642460823059, 0.21799005568027496, 0.00960579514503479),
            (-0.7739822268486023, 0.21799005568027496, -0.16853806376457214),
            (-0.5462580919265747, -0.2188262790441513, 0.005172610282897949),
            (-0.5285549759864807, -0.2188262790441513, -0.1757417619228363),
            (-0.7385442852973938, -0.2188262790441513, 0.01017773151397705),
            (-0.7747422456741333, -0.2188262790441513, -0.16783738136291504),
            (-0.22047436237335205, 0.09685100615024567, 0.0034177303314208984),
            (-0.23757591843605042, 0.09957411140203476, -0.17714565992355347),
            (-0.2217293083667755, -0.10106956958770752, 0.0034177303314208984),
            (-0.23876745998859406, -0.10459494590759277, -0.17714565992355347),
            (-0.8752464056015015, 0.21799005568027496, 0.013177096843719482),
            (-0.8853026032447815, 0.21799005568027496, -0.16327977180480957),
            (-0.8779688477516174, -0.2188262790441513, 0.0138358473777771),
            (-0.888026237487793, -0.2188262790441513, -0.1626269817352295),
            (-0.9033963680267334, -0.13404621183872223, 0.01271982491016388),
            (-0.9138736128807068, -0.13419777154922485, -0.16175852715969086),
            (-0.9015587568283081, 0.13678282499313354, 0.012274876236915588),
            (-0.9120352268218994, 0.13663125038146973, -0.1621994823217392),
            (-0.9283474683761597, 0.001633531996048987, 0.011488258838653564),
            (-0.9392443895339966, 0.0014603165909647942, -0.16100460290908813),
            (-0.21633772552013397, -0.002173516433686018, 0.0034177303314208984),
            (-0.23368653655052185, -0.0026131507474929094, -0.17714565992355347),
            (-0.23543070256710052, 0.15953531861305237, 0.0034177303314208984),
            (-0.25147223472595215, 0.1602921187877655, -0.17714565992355347),
            (-0.2379319816827774, -0.16336847841739655, 0.0034177303314208984),
            (-0.2538416385650635, -0.16469651460647583, -0.17714565992355347),
            (-0.9223479628562927, -0.07395240664482117, 0.011853918433189392),
            (-0.9331400394439697, -0.07412020862102509, -0.16113583743572235),
            (-0.9214120507240295, 0.07708685845136642, 0.011627092957496643),
            (-0.9322037696838379, 0.0769190564751625, -0.16136063635349274),
            (-0.24801969528198242, 0.21799005568027496, 0.004202842712402344),
            (-0.2641502618789673, 0.21799005568027496, -0.1765175759792328),
            (-1.0138167142868042, -0.1345767080783844, -0.597954511642456),
            (-1.0119762420654297, 0.13625234365463257, -0.5983853936195374),
            (-1.0402365922927856, 0.0010272779036313295, -0.5922368168830872),
            (-0.27705854177474976, -0.003712236415594816, -0.628554105758667),
            (-0.2915760278701782, 0.16218411922454834, -0.628554105758667),
            (-0.29361575841903687, -0.16801664233207703, -0.628554105758667),
            (-1.0338703393936157, -0.07453972101211548, -0.5936102867126465),
            (-1.0329328775405884, 0.07649955153465271, -0.5938299894332886),
            (-0.30447661876678467, 0.21799005568027496, -0.6283185482025146),
            (-0.986919641494751, -0.2188262790441513, -0.6037840843200684),
            (-0.984192967414856, 0.21799005568027496, -0.6044219732284546),
            (-0.2813628613948822, -0.11340838670730591, -0.628554105758667),
            (-0.28032976388931274, 0.10638188570737839, -0.628554105758667),
            (-0.8652371764183044, -0.2188262790441513, -0.6128751039505005),
            (-0.4842972159385681, -0.2188262790441513, -0.6280276775360107),
            (-0.8635270595550537, 0.21799005568027496, -0.6138976812362671),
            (-0.4820275902748108, 0.21799005568027496, -0.6290163993835449),
            (-0.3071815073490143, -0.2188262790441513, -0.6282908916473389),
            (-1.0326272249221802, -0.13472828269004822, -0.7724328637123108),
            (-1.0307860374450684, 0.13610076904296875, -0.7728597521781921),
            (-1.0594669580459595, 0.0008540624985471368, -0.7647296786308289),
            (-0.29440730810165405, -0.004151870496571064, -0.8091175556182861),
            (-0.30761754512786865, 0.16294091939926147, -0.8091175556182861),
            (-0.30952543020248413, -0.1693446934223175, -0.8091175556182861),
            (-1.0529956817626953, -0.0747075304389, -0.7666000127792358),
            (-1.0520579814910889, 0.07633174955844879, -0.7668176889419556),
            (-0.32060718536376953, 0.21799005568027496, -0.8090389966964722),
            (-1.0053104162216187, -0.2188262790441513, -0.7802469730377197),
            (-1.0025824308395386, 0.21799005568027496, -0.7808789014816284),
            (-0.29840102791786194, -0.11693376302719116, -0.8091175556182861),
            (-0.2974313497543335, 0.10910499840974808, -0.8091175556182861),
            (-0.9014351963996887, -0.2188262790441513, -0.7908902168273926),
            (-0.4665940999984741, -0.2188262790441513, -0.8089420795440674),
            (-0.8993449807167053, 0.21799005568027496, -0.7920416593551636),
            (-0.4624350070953369, 0.21799005568027496, -0.8101012706756592),
            (-0.3233279883861542, -0.2188262790441513, -0.8090298175811768),
            (-0.9460289478302002, -0.2188262790441513, -0.4273212254047394),
            (-0.9433034658432007, 0.21799005568027496, -0.42796507477760315),
            (-0.22682468593120575, -0.10988301038742065, -0.447990745306015),
            (-0.22572822868824005, 0.1036587804555893, -0.447990745306015),
            (-0.8290392160415649, -0.2188262790441513, -0.4348600208759308),
            (-0.5020003318786621, -0.2188262790441513, -0.4471133053302765),
            (-0.8277091383934021, 0.21799005568027496, -0.43575385212898254),
            (-0.5020003318786621, 0.21799005568027496, -0.44793155789375305),
            (-0.25353503227233887, -0.2188262790441513, -0.44755199551582336),
            (-0.9725061655044556, -0.13442513346672058, -0.42347609996795654),
            (-0.9706665277481079, 0.1364039182662964, -0.42391103506088257),
            (-0.9985064268112183, 0.0012004934251308441, -0.41974392533302307),
            (-0.22220970690250397, -0.0032726023346185684, -0.447990745306015),
            (-0.23803450167179108, 0.1614273190498352, -0.447990745306015),
            (-0.24020613729953766, -0.16668859124183655, -0.447990745306015),
            (-0.9922448992729187, -0.07437191903591156, -0.42062050104141235),
            (-0.9913079142570496, 0.07666735351085663, -0.4208422601222992),
            (-0.2508460581302643, 0.21799005568027496, -0.4475981295108795),
            (-0.2748885452747345, -0.2188262790441513, -0.26681312918663025),
            (-0.5212126970291138, 0.21799005568027496, -0.2668466866016388),
            (-0.7918911576271057, 0.21799005568027496, -0.2576099932193756),
            (-0.5197033882141113, -0.2188262790441513, -0.26619890332221985),
            (-0.7928412556648254, -0.2188262790441513, -0.2568449079990387),
            (-0.2461266964673996, 0.1009356677532196, -0.26742735505104065),
            (-0.24728652834892273, -0.1063576340675354, -0.26742735505104065),
            (-0.900330662727356, 0.21799005568027496, -0.2515082061290741),
            (-0.9030548930168152, -0.2188262790441513, -0.2508583962917328),
            (-0.9291122555732727, -0.13427355885505676, -0.24899771809577942),
            (-0.9272734522819519, 0.13655546307563782, -0.24943667650222778),
            (-0.9546928405761719, 0.0013737088302150369, -0.24725103378295898),
            (-0.2423609346151352, -0.0028329677879810333, -0.26742735505104065),
            (-0.25949299335479736, 0.16067051887512207, -0.26742735505104065),
            (-0.2617964744567871, -0.16536054015159607, -0.26742735505104065),
            (-0.9485360980033875, -0.07420411705970764, -0.24763071537017822),
            (-0.9475995898246765, 0.07683515548706055, -0.24785450100898743),
            (-0.2722155451774597, 0.21799005568027496, -0.26687780022621155),
            (-0.2587420642375946, -0.2188262790441513, -0.08607426285743713),
            (-0.5408053398132324, 0.21799005568027496, -0.08576187491416931),
            (-0.7560732364654541, 0.21799005568027496, -0.07946613430976868),
            (-0.5374065637588501, -0.2188262790441513, -0.08528456091880798),
            (-0.7566432356834412, -0.2188262790441513, -0.078829824924469),
            (-0.22902514040470123, 0.09821255505084991, -0.08686396479606628),
            (-0.23024839162826538, -0.10283225774765015, -0.08686396479606628),
            (-0.8777745366096497, 0.21799005568027496, -0.07505133748054504),
            (-0.8804975152015686, -0.2188262790441513, -0.0743955671787262),
            (-0.25608497858047485, 0.21799005568027496, -0.08615735173225403),
            (-0.9243078827857971, 0.07700295746326447, -0.07486677169799805),
            (-0.9252440333366394, -0.07403630763292313, -0.07464095950126648),
            (-0.24588680267333984, -0.1640324890613556, -0.08686396479606628),
            (-0.24345147609710693, 0.15991371870040894, -0.08686396479606628),
            (-0.22501212358474731, -0.0023933337070047855, -0.08686396479606628),
            (-0.9312959313392639, 0.0015469242352992296, -0.07475817203521729),
            (-0.9042969942092896, 0.13670703768730164, -0.0749623030424118),
            (-0.9061350226402283, -0.13412198424339294, -0.07451935112476349),
            (-0.8779401183128357, -0.2188262790441513, 0.1020672619342804),
            (-0.8752183318138123, 0.21799005568027496, 0.10140553116798401),
            (-0.21321022510528564, -0.09930688142776489, 0.09369942545890808),
            (-0.21192358434200287, 0.09548944979906082, 0.09369942545890808),
            (-0.7204453349113464, -0.2188262790441513, 0.0991852879524231),
            (-0.5551096200942993, -0.2188262790441513, 0.09562979638576508),
            (-0.7202553153038025, 0.21799005568027496, 0.09867775440216064),
            (-0.5603978633880615, 0.21799005568027496, 0.09532296657562256),
            (-0.2425955832004547, -0.2188262790441513, 0.09466460347175598),
            (-0.23995444178581238, 0.21799005568027496, 0.09456305205821991),
            (-0.9210161566734314, 0.07717075943946838, 0.09812096506357193),
            (-0.9219518899917603, -0.07386850565671921, 0.09834880381822586),
            (-0.22997716069221497, -0.1627044677734375, 0.09369942545890808),
            (-0.22740992903709412, 0.1591569185256958, 0.09369942545890808),
            (-0.20766332745552063, -0.0019536991603672504, 0.09369942545890808),
            (-0.9278990030288696, 0.0017201397567987442, 0.09773468971252441),
            (-0.9013205170631409, 0.13685861229896545, 0.09951205551624298),
            (-0.9031577706336975, -0.13397042453289032, 0.09995901584625244),
            (1.4054619073867798, 0.20999182760715485, 0.657495379447937),
            (1.4054619073867798, 0.20706941187381744, 0.535412073135376),
            (1.4054617881774902, -0.2108285278081894, 0.657495379447937),
            (1.4054617881774902, -0.207906112074852, 0.535412073135376),
            (0.9581657648086548, -0.13874343037605286, 0.535412073135376),
            (1.440767765045166, 0.1238132119178772, 0.535412073135376),
            (1.440767765045166, 0.1238132119178772, 0.657495379447937),
            (1.440767765045166, 0.1238132119178772, 0.28282877802848816),
            (0.9581657648086548, 0.13790690898895264, 0.535412073135376),
            (1.3157678842544556, 0.0652322918176651, 0.25782880187034607),
            (1.3157678842544556, 6.633996963500977e-05, 0.25157880783081055),
            (1.3157678842544556, -0.06601786613464355, 0.25782880187034607),
            (1.3157678842544556, 0.13631321489810944, 0.2703287899494171),
            (1.3157678842544556, -0.13712434470653534, 0.2703287899494171),
            (1.3157678842544556, -0.13874343037605286, 0.535412073135376),
            (1.440767765045166, -0.06601786613464355, 0.2703287899494171),
            (1.440767765045166, 6.633996963500977e-05, 0.2640787959098816),
            (1.440767765045166, 0.0652322918176651, 0.2703287899494171),
            (1.3157678842544556, 0.13790692389011383, 0.535412073135376),
            (1.4054619073867798, 0.0652322918176651, 0.25782880187034607),
            (1.4054619073867798, 6.633996963500977e-05, 0.25157880783081055),
            (1.4054619073867798, -0.06601785123348236, 0.25782880187034607),
            (1.4054619073867798, 0.13631321489810944, 0.2703287899494171),
            (1.4054619073867798, -0.13712434470653534, 0.2703287899494171),
            (1.4054619073867798, -0.13874344527721405, 0.535412073135376),
            (1.440767765045166, -0.1246243417263031, 0.28282877802848816),
            (1.440767765045166, -0.1246243417263031, 0.535412073135376),
            (1.440767765045166, -0.1246243417263031, 0.657495379447937),
            (1.4054619073867798, 0.13790692389011383, 0.535412073135376),
            (1.440767765045166, 0.0652322918176651, 0.25782880187034607),
            (1.440767765045166, 6.633996963500977e-05, 0.25157880783081055),
            (1.440767765045166, -0.06601786613464355, 0.25782880187034607),
            (1.440767765045166, 0.13631321489810944, 0.2703287899494171),
            (1.440767765045166, -0.13712434470653534, 0.2703287899494171),
            (0.9581657648086548, 0.123813197016716, 0.535412073135376),
            (0.9581657648086548, 0.123813197016716, 0.657495379447937),
            (0.9581657648086548, 0.123813197016716, 0.28282877802848816),
            (0.9581657648086548, -0.06601786613464355, 0.2703287899494171),
            (0.9581657648086548, 6.633996963500977e-05, 0.2640787959098816),
            (0.9581657648086548, 0.0652322918176651, 0.2703287899494171),
            (0.9581657648086548, -0.1246243417263031, 0.28282877802848816),
            (0.9581657648086548, -0.1246243417263031, 0.535412073135376),
            (0.9581657648086548, -0.1246243417263031, 0.657495379447937),
            (1.3157678842544556, -0.1246243417263031, 0.535412073135376),
            (1.4054619073867798, -0.1246243417263031, 0.535412073135376),
            (1.3157678842544556, -0.1246243417263031, 0.657495379447937),
            (1.4054619073867798, -0.1246243417263031, 0.657495379447937),
            (1.4054619073867798, -0.13712434470653534, 0.657495379447937),
            (1.3157678842544556, -0.13712434470653534, 0.657495379447937),
            (0.9581657648086548, -0.13712434470653534, 0.657495379447937),
            (1.4054619073867798, 0.1238132119178772, 0.535412073135376),
            (1.3157678842544556, 0.1238132119178772, 0.535412073135376),
            (1.4054619073867798, 0.1238132119178772, 0.657495379447937),
            (1.3157678842544556, 0.1238132119178772, 0.657495379447937),
            (1.4054619073867798, -0.1246243417263031, 0.28282877802848816),
            (1.3157678842544556, -0.1246243417263031, 0.28282877802848816),
            (1.4054619073867798, 6.633996963500977e-05, 0.2640787959098816),
            (1.3157678842544556, 6.633996963500977e-05, 0.2640787959098816),
            (1.3157678842544556, -0.06601786613464355, 0.2703287899494171),
            (1.4054619073867798, -0.06601786613464355, 0.2703287899494171),
            (1.3157678842544556, 0.1238132119178772, 0.28282877802848816),
            (1.4054619073867798, 0.1238132119178772, 0.28282877802848816),
            (1.3157678842544556, 0.0652322918176651, 0.2703287899494171),
            (1.4054619073867798, 0.0652322918176651, 0.2703287899494171),
            (1.4054619073867798, 0.13631321489810944, 0.657495379447937),
            (1.3157678842544556, 0.13631321489810944, 0.657495379447937),
            (0.9581657648086548, 0.13631321489810944, 0.657495379447937),
           ]
    
    faces= [(92, 100, 148, 143),
            (126, 170, 166, 123),
            (134, 194, 195, 56),
            (56, 195, 196, 138),
            (361, 2, 47, 367),
            (1, 86, 179, 83),
            (1, 83, 110, 23),
            (1, 23, 92, 22),
            (1, 22, 177, 86),
            (237, 231, 228, 233),
            (448, 326, 338, 442),
            (2, 55, 136, 47),
            (2, 17, 131, 55),
            (372, 48, 8, 364),
            (65, 68, 171, 161),
            (165, 124, 117, 159),
            (147, 99, 91, 144),
            (114, 26, 23, 110),
            (92, 23, 26, 100),
            (163, 119, 127, 169),
            (69, 168, 164, 67),
            (112, 25, 27, 116),
            (103, 27, 25, 97),
            (102, 149, 146, 96),
            (101, 42, 35, 95),
            (104, 98, 24, 28),
            (123, 166, 156, 118),
            (102, 40, 38, 99),
            (103, 150, 148, 100),
            (38, 40, 115, 113),
            (114, 116, 27, 26),
            (113, 115, 41, 39),
            (26, 27, 103, 100),
            (39, 41, 116, 114),
            (102, 96, 36, 40),
            (111, 115, 40, 36),
            (111, 37, 41, 115),
            (112, 116, 41, 37),
            (452, 453, 101, 95),
            (3, 53, 132, 18),
            (362, 4, 46, 366),
            (3, 46, 135, 53),
            (4, 52, 135, 46),
            (360, 366, 46, 3),
            (4, 47, 136, 52),
            (5, 85, 176, 21),
            (5, 21, 91, 33),
            (5, 33, 109, 82),
            (5, 82, 178, 85),
            (6, 84, 178, 82),
            (6, 82, 109, 34),
            (6, 34, 110, 83),
            (6, 83, 179, 84),
            (113, 39, 34, 109),
            (114, 110, 34, 39),
            (137, 189, 190, 51),
            (138, 196, 197, 50),
            (51, 190, 188, 133),
            (50, 197, 189, 137),
            (157, 94, 81, 76),
            (122, 126, 125, 121),
            (450, 98, 104, 451),
            (119, 120, 128, 127),
            (91, 99, 38, 33),
            (113, 109, 33, 38),
            (135, 52, 193, 192),
            (7, 49, 138, 50),
            (7, 50, 137, 48),
            (8, 48, 137, 51),
            (8, 51, 133, 10),
            (136, 183, 193, 52),
            (182, 132, 53, 191),
            (135, 192, 191, 53),
            (152, 54, 187, 186),
            (133, 188, 187, 54),
            (136, 55, 184, 183),
            (185, 184, 55, 131),
            (154, 57, 181, 180),
            (9, 14, 134, 56),
            (9, 56, 138, 49),
            (182, 181, 57, 132),
            (147, 144, 63, 66),
            (44, 80, 159, 117),
            (148, 67, 62, 143),
            (134, 72, 198, 194),
            (153, 199, 198, 72),
            (153, 73, 200, 199),
            (154, 180, 200, 73),
            (185, 131, 70, 201),
            (151, 202, 201, 70),
            (151, 71, 203, 202),
            (152, 186, 203, 71),
            (148, 150, 69, 67),
            (69, 64, 162, 168),
            (149, 102, 99, 147),
            (167, 66, 63, 247, 94, 157),
            (66, 68, 149, 147),
            (146, 149, 68, 65),
            (145, 64, 69, 150),
            (167, 171, 68, 66),
            (145, 150, 103, 97),
            (371, 49, 7, 363),
            (432, 176, 85, 449),
            (18, 132, 57, 0),
            (142, 19, 206, 227),
            (129, 172, 80, 44),
            (43, 78, 172, 129),
            (130, 175, 78, 43),
            (75, 45, 118, 156),
            (155, 174, 76, 81),
            (156, 157, 76, 75),
            (45, 75, 175, 130),
            (174, 175, 75, 76),
            (172, 78, 77, 173),
            (173, 77, 174, 155),
            (93, 158, 79, 74),
            (174, 77, 78, 175),
            (158, 159, 80, 79),
            (173, 155, 74, 79),
            (164, 158, 93, 246, 62, 67),
            (172, 173, 79, 80),
            (164, 165, 159, 158),
            (166, 167, 157, 156),
            (122, 160, 170, 126),
            (163, 169, 168, 162),
            (169, 127, 124, 165),
            (161, 171, 170, 160),
            (168, 169, 165, 164),
            (170, 171, 167, 166),
            (231, 74, 155, 228),
            (362, 367, 47, 4),
            (13, 0, 57, 154, 73, 153, 72),
            (12, 10, 133, 54),
            (12, 54, 152, 71, 151, 70, 11),
            (13, 72, 134, 14),
            (444, 235, 249, 440),
            (15, 140, 180, 181),
            (87, 15, 181, 182),
            (16, 106, 183, 184),
            (88, 16, 184, 185),
            (19, 142, 186, 187),
            (90, 19, 187, 188),
            (108, 20, 190, 189),
            (20, 90, 188, 190),
            (29, 87, 182, 191),
            (105, 29, 191, 192),
            (30, 105, 192, 193),
            (106, 30, 193, 183),
            (89, 31, 195, 194),
            (31, 107, 196, 195),
            (107, 32, 197, 196),
            (32, 108, 189, 197),
            (58, 89, 194, 198),
            (139, 58, 198, 199),
            (59, 139, 199, 200),
            (140, 59, 200, 180),
            (60, 88, 185, 201),
            (141, 60, 201, 202),
            (61, 141, 202, 203),
            (142, 61, 203, 186),
            (212, 224, 213, 225, 204, 216, 208, 
            220, 209, 221, 205, 217, 214, 226, 
            215, 227, 206, 219, 207, 223, 211, 
            222, 210, 218),
            (59, 140, 225, 213),
            (31, 89, 218, 210),
            (19, 90, 219, 206),
            (88, 60, 214, 217),
            (107, 31, 210, 222),
            (20, 108, 223, 207),
            (60, 141, 226, 214),
            (32, 107, 222, 211),
            (90, 20, 207, 219),
            (141, 61, 215, 226),
            (140, 15, 204, 225),
            (108, 32, 211, 223),
            (87, 29, 208, 216),
            (61, 142, 227, 215),
            (15, 87, 216, 204),
            (89, 58, 212, 218),
            (29, 105, 220, 208),
            (106, 16, 205, 221),
            (58, 139, 224, 212),
            (105, 30, 209, 220),
            (16, 88, 217, 205),
            (139, 59, 213, 224),
            (30, 106, 221, 209),
            (232, 81, 94, 230),
            (445, 441, 251, 234),
            (236, 232, 230, 235),
            (74, 231, 229, 93),
            (81, 232, 228, 155),
            (433, 448, 86, 177),
            (232, 236, 233, 228),
            (231, 237, 234, 229),
            (434, 236, 235, 444),
            (21, 238, 144, 91),
            (63, 144, 238, 239),
            (247, 63, 239, 248),
            (239, 238, 240, 241),
            (176, 240, 238, 21),
            (249, 248, 239, 241),
            (435, 237, 233, 446),
            (436, 240, 176, 432),
            (368, 10, 12, 376),
            (62, 243, 242, 143),
            (243, 245, 244, 242),
            (246, 250, 243, 62),
            (22, 92, 143, 242),
            (177, 22, 242, 244),
            (251, 245, 243, 250),
            (437, 241, 240, 436),
            (433, 177, 244, 438),
            (439, 438, 244, 245),
            (131, 17, 11, 70),
            (234, 251, 250, 229),
            (93, 229, 250, 246),
            (235, 230, 248, 249),
            (94, 247, 248, 230),
            (386, 269, 265, 383),
            (385, 384, 267, 268),
            (379, 261, 267, 384),
            (440, 249, 241, 437),
            (383, 265, 264, 382),
            (382, 264, 260, 378),
            (381, 263, 255, 390),
            (380, 262, 257, 392),
            (379, 388, 253, 261),
            (391, 395, 266, 256),
            (413, 266, 268, 397),
            (392, 257, 269, 386),
            (407, 412, 259, 254),
            (402, 262, 255, 408),
            (405, 411, 258, 252),
            (407, 254, 258, 411),
            (378, 260, 252, 387),
            (401, 263, 256, 409),
            (369, 288, 271, 360),
            (351, 289, 270, 342),
            (365, 281, 304, 377),
            (347, 280, 305, 359),
            (364, 368, 287, 279),
            (346, 350, 286, 278),
            (370, 361, 273, 290),
            (352, 343, 272, 291),
            (371, 292, 281, 365),
            (353, 293, 280, 347),
            (372, 294, 277, 363),
            (354, 295, 276, 345),
            (373, 296, 288, 369),
            (355, 297, 289, 351),
            (374, 298, 296, 373),
            (356, 299, 297, 355),
            (370, 290, 300, 375),
            (352, 291, 301, 357),
            (376, 375, 300, 302),
            (358, 357, 301, 303),
            (377, 304, 298, 374),
            (359, 305, 299, 356),
            (395, 286, 303, 385),
            (350, 287, 302, 358),
            (389, 394, 284, 274),
            (344, 349, 285, 275),
            (380, 293, 276, 390),
            (353, 292, 277, 345),
            (387, 393, 282, 270),
            (342, 348, 283, 271),
            (389, 274, 282, 393),
            (344, 275, 283, 348),
            (381, 295, 278, 391),
            (354, 294, 279, 346),
            (388, 272, 284, 394),
            (343, 273, 285, 349),
            (403, 321, 311, 398),
            (415, 416, 310, 308),
            (397, 398, 311, 309),
            (414, 306, 312, 417),
            (396, 307, 313, 399),
            (423, 341, 309, 415),
            (441, 340, 308, 439),
            (429, 424, 339, 329),
            (447, 442, 338, 328),
            (420, 319, 331, 428),
            (434, 318, 330, 446),
            (431, 425, 337, 325),
            (449, 443, 336, 324),
            (429, 329, 337, 425),
            (447, 328, 336, 443),
            (419, 317, 333, 427),
            (435, 316, 332, 445),
            (430, 327, 339, 424),
            (406, 253, 259, 412),
            (421, 320, 310, 416),
            (399, 313, 315, 400),
            (417, 312, 314, 418),
            (400, 315, 323, 404),
            (418, 314, 322, 422),
            (401, 317, 331, 408),
            (419, 316, 330, 428),
            (402, 319, 335, 410),
            (420, 318, 334, 426),
            (403, 406, 327, 321),
            (421, 430, 326, 320),
            (409, 413, 341, 333),
            (427, 423, 340, 332),
            (410, 335, 307, 396),
            (426, 334, 306, 414),
            (404, 323, 325, 405),
            (422, 322, 324, 431),
            (272, 343, 349, 284),
            (295, 354, 346, 278),
            (274, 344, 348, 282),
            (270, 282, 348, 342),
            (293, 353, 345, 276),
            (274, 284, 349, 344),
            (286, 350, 358, 303),
            (304, 359, 356, 298),
            (302, 300, 357, 358),
            (290, 352, 357, 300),
            (298, 356, 355, 296),
            (296, 355, 351, 288),
            (294, 354, 345, 277),
            (292, 353, 347, 281),
            (290, 273, 343, 352),
            (279, 287, 350, 346),
            (281, 347, 359, 304),
            (288, 351, 342, 271),
            (14, 377, 374, 13),
            (12, 11, 375, 376),
            (17, 370, 375, 11),
            (13, 374, 373, 0),
            (0, 373, 369, 18),
            (48, 372, 363, 7),
            (49, 371, 365, 9),
            (17, 2, 361, 370),
            (8, 10, 368, 364),
            (9, 365, 377, 14),
            (18, 369, 360, 3),
            (287, 368, 376, 302),
            (275, 285, 367, 362),
            (292, 371, 363, 277),
            (271, 283, 366, 360),
            (275, 362, 366, 283),
            (294, 372, 364, 279),
            (273, 361, 367, 285),
            (253, 388, 394, 259),
            (263, 381, 391, 256),
            (254, 389, 393, 258),
            (252, 258, 393, 387),
            (262, 380, 390, 255),
            (254, 259, 394, 389),
            (266, 395, 385, 268),
            (289, 378, 387, 270),
            (280, 392, 386, 305),
            (278, 286, 395, 391),
            (291, 272, 388, 379),
            (293, 380, 392, 280),
            (295, 381, 390, 276),
            (297, 382, 378, 289),
            (299, 383, 382, 297),
            (291, 379, 384, 301),
            (303, 301, 384, 385),
            (305, 386, 383, 299),
            (260, 404, 405, 252),
            (257, 410, 396, 269),
            (256, 266, 413, 409),
            (261, 253, 406, 403),
            (262, 402, 410, 257),
            (263, 401, 408, 255),
            (264, 400, 404, 260),
            (265, 399, 400, 264),
            (327, 406, 412, 339),
            (269, 396, 399, 265),
            (268, 267, 398, 397),
            (261, 403, 398, 267),
            (317, 401, 409, 333),
            (329, 407, 411, 337),
            (325, 337, 411, 405),
            (319, 402, 408, 331),
            (329, 339, 412, 407),
            (341, 413, 397, 309),
            (323, 422, 431, 325),
            (335, 426, 414, 307),
            (333, 341, 423, 427),
            (321, 327, 430, 421),
            (319, 420, 426, 335),
            (317, 419, 428, 331),
            (315, 418, 422, 323),
            (313, 417, 418, 315),
            (321, 421, 416, 311),
            (326, 430, 424, 338),
            (316, 419, 427, 332),
            (328, 429, 425, 336),
            (324, 336, 425, 431),
            (318, 420, 428, 330),
            (328, 338, 424, 429),
            (340, 423, 415, 308),
            (307, 414, 417, 313),
            (309, 311, 416, 415),
            (237, 435, 445, 234),
            (84, 447, 443, 178),
            (85, 178, 443, 449),
            (236, 434, 446, 233),
            (84, 179, 442, 447),
            (251, 441, 439, 245),
            (306, 440, 437, 312),
            (308, 310, 438, 439),
            (320, 433, 438, 310),
            (312, 437, 436, 314),
            (314, 436, 432, 322),
            (316, 435, 446, 330),
            (318, 434, 444, 334),
            (320, 326, 448, 433),
            (332, 340, 441, 445),
            (334, 444, 440, 306),
            (322, 432, 449, 324),
            (86, 448, 442, 179),
            (120, 450, 451, 128),
            (121, 125, 453, 452),
            (127, 117, 124),
            (123, 118, 126),
            (126, 118, 45, 454),
            (129, 44, 462, 459),
            (454, 45, 463, 464),
            (28, 24, 456, 455),
            (483, 481, 465, 475),
            (117, 127, 458, 44),
            (462, 468, 478, 472),
            (479, 482, 457, 467),
            (464, 463, 473, 474),
            (461, 460, 470, 471),
            (482, 28, 455, 457),
            (44, 458, 468, 462),
            (43, 129, 459, 460),
            (481, 480, 466, 465),
            (130, 43, 460, 461),
            (45, 130, 461, 463),
            (469, 472, 482, 479),
            (472, 478, 28, 482),
            (474, 473, 483, 42),
            (459, 462, 472, 469),
            (35, 42, 476, 477),
            (463, 461, 471, 473),
            (460, 459, 469, 470),
            (42, 483, 475, 476),
            (480, 479, 467, 466),
            (473, 471, 481, 483),
            (470, 469, 479, 480),
            (471, 470, 480, 481),
            (464, 125, 126, 454),
            (474, 453, 125, 464),
            (468, 128, 451, 478),
            (451, 104, 28, 478),
            (42, 101, 453, 474),
            (127, 128, 468, 458),
            (505, 493, 494, 504),
            (508, 507, 488, 487),
            (491, 493, 505, 490),
            (512, 510, 486, 489),
            (495, 493, 491, 492),
            (505, 508, 487, 490),
            (501, 503, 485, 484),
            (507, 512, 489, 488),
            (477, 476, 494, 496),
            (496, 494, 493, 495),
            (35, 477, 496, 497),
            (495, 498, 497, 496),
            (499, 498, 495, 492),
            (122, 121, 498, 499),
            (121, 452, 497, 498),
            (35, 497, 452, 95),
            (455, 456, 502, 500),
            (500, 502, 503, 501),
            (466, 467, 513, 506),
            (506, 513, 512, 507),
            (475, 465, 509, 504),
            (504, 509, 508, 505),
            (467, 457, 511, 513),
            (513, 511, 510, 512),
            (465, 466, 506, 509),
            (509, 506, 507, 508),
            (475, 504, 494, 476),
            (501, 484, 486, 510),
            (500, 501, 510, 511),
            (457, 455, 500, 511),
            (24, 514, 502, 456),
            (503, 502, 514, 515),
            (485, 503, 515, 516),
            (450, 514, 24, 98),
            (120, 515, 514, 450),
            (119, 516, 515, 120),
            ]
    
    #Make the frame object:
    f_mesh = bpy.data.meshes.new("frame")
    frame_obj = bpy.data.objects.new("Frame_Obj", f_mesh)

    scene = bpy.context.scene
    scene.objects.link(frame_obj)
    bm = bmesh.new()
    
    #Add verts, then faces:
    for v_co in verts:
        bm.verts.new(v_co)

    bm.verts.ensure_lookup_table()
    for f_idx in faces:
        bm.faces.new([bm.verts[i] for i in f_idx])
    
    smooth_f_index= [2, 3, 4, 5, 6, 7,
                     8, 9, 10, 11, 12, 13,
                     39, 40, 41, 42, 43, 44,
                     45, 46, 47, 48, 49, 50,
                     51, 52, 55, 56, 57, 58,
                     59, 65, 66, 67, 68, 69,
                     70, 71, 72, 75, 76, 78,
                     79, 82, 101, 102, 105, 106,
                     107, 108, 109, 110, 111, 112,
                     113, 114, 115, 116, 117, 118,
                     120, 129, 130, 135, 162, 165,
                     166, 168, 169, 172, 173, 177,
                     178, 180, 181, 183, 184, 185,
                     186, 187, 188, 189, 190, 191,
                     192, 199, 212, 213, 214, 215,
                     222, 223, 224, 225, 227, 228,
                     229, 230, 231, 232, 233, 234,
                     235, 236, 237, 238, 239, 240,
                     241, 242, 243, 244, 245, 258,
                     259, 260, 261, 262, 263, 264,
                     265, 266, 267, 268, 269, 277,
                     278, 279, 280, 281, 282, 283,
                     284, 285, 286, 287, 288, 294,
                     295, 296, 297, 298, 299, 300,
                     301, 302, 303, 304, 305, 306,
                     307, 308, 309, 310, 311, 318,
                     319, 320, 321, 322, 323, 329,
                     330, 331, 332, 333, 334, 336,
                     337, 338, 339, 340, 341, 342,
                     343, 344, 345, 346, 347, 349,
                     350, 351, 352, 353, 354, 360,
                     361, 362, 363, 364, 365, 368,
                     372, 373, 374, 375, 376, 378,
                     379, 380, 381, 382, 383, 387,
                     388, 389, 390, 391, 392, 396,
                     397, 398, 399, 400, 407, 408,
                     409, 410, 411, 412, 413, 419,
                     427, 430, 432, 433, 434, 437,
                     439, 440, 443, 444, 445, 453,
                     455, 457, 459, 470, 471, 472,
                     473, 474, 475, 476, 477,
                    ]
    
    bm.verts.ensure_lookup_table()
    bm.edges.ensure_lookup_table()
    bm.faces.ensure_lookup_table()
    for i in smooth_f_index:
        bm.faces[i].smooth = True
    
    #Move the entire front:
    vert_index= [24, 28, 35, 42, 43, 44,
                 45, 95, 98, 101, 104, 117,
                 118, 119, 120, 121, 122, 123,
                 124, 125, 126, 127, 128, 129,
                 130, 450, 451, 452, 453, 454,
                 455, 456, 457, 458, 459, 460,
                 461, 462, 463, 464, 465, 466,
                 467, 468, 469, 470, 471, 472,
                 473, 474, 475, 476, 477, 478,
                 479, 480, 481, 482, 483, 484,
                 485, 486, 487, 488, 489, 490,
                 491, 492, 493, 494, 495, 496,
                 497, 498, 499, 500, 501, 502,
                 503, 504, 505, 506, 507, 508,
                 509, 510, 511, 512, 513, 514,
                 515, 516,]
    
    verts_geom = [bm.verts[i] for i in vert_index]
    loc = (front, 0.0, 0.0)
    bmesh.ops.translate(bm, vec=loc, verts=verts_geom)
    
    #Move the cut part of the front:
    vert_index= [43, 44, 45, 117, 118, 119,
                 122, 123, 124, 126, 127, 129,
                 130, 454, 458, 484, 485, 486,
                 487, 488, 489, 490, 491, 492, 
                 499, 516,]
    
    verts_geom = [bm.verts[i] for i in vert_index]
    loc = (shift, 0.0, 0.0)
    bmesh.ops.translate(bm, vec=loc, verts=verts_geom)
    
    #Resize the width:
    scl = (1.0, (0.436817 + w) / 0.436817, 1.0)
    loc = mathutils.Matrix.Translation((0.0, 0.0, 0.0))
    bmesh.ops.scale(bm, vec=scl, space=loc, verts=bm.verts)
    
    #Finalize changes:
    bm.to_mesh(f_mesh)
    bm.free()
    f_mesh.update()
    
    return frame_obj

def make_loop_guard(str, seg, x0, x1, hwidth, height, thick):
    #Basic geometry:
    verts= [(-0.2824999988079071, -0.125, -0.13750000298023224),
            (-0.2824999988079071, -0.125, 0.3125),
            (-0.2824999988079071, 0.125, -0.13750000298023224),
            (-0.2824999988079071, 0.125, 0.3125),
            (0.6575000286102295, -0.125, -0.1875),
            (0.6575000286102295, -0.125, 0.3125),
            (0.6575000286102295, 0.125, -0.1875),
            (0.6575000286102295, 0.125, 0.3125),
            (-0.2824999988079071, -0.125, -0.020833328366279602),
            (-0.2824999988079071, -0.125, 0.1458333283662796),
            (-0.2824999988079071, 0.125, 0.1458333283662796),
            (-0.2824999988079071, 0.125, -0.020833328366279602),
            (0.625, 0.125, 0.1458333283662796),
            (0.625, 0.125, -0.020833328366279602),
            (0.625, -0.125, 0.1458333283662796),
            (0.625, -0.125, -0.020833328366279602),
            (0.45749998092651367, 0.125, -0.1875),
            (0.45749998092651367, 0.125, 0.3125),
            (0.45749998092651367, -0.125, -0.1875),
            (0.45749998092651367, -0.125, 0.3125),
            (0.5075000524520874, -0.125, -0.020833328366279602),
            (0.5325000286102295, -0.125, 0.1458333283662796),
            (0.5075000524520874, 0.125, -0.020833328366279602),
            (0.5325000286102295, 0.125, 0.1458333283662796),
            (-0.11249999701976776, 0.125, -0.1875),
            (-0.11249999701976776, -0.125, 0.3125),
            (-0.16249999403953552, -0.125, -0.020833328366279602),
            (-0.1875, -0.125, 0.1458333283662796),
            (-0.11249999701976776, 0.125, 0.3125),
            (-0.11249999701976776, -0.125, -0.1875),
            (-0.16249999403953552, 0.125, -0.020833328366279602),
            (-0.1875, 0.125, 0.1458333283662796),
            (-0.2824999988079071, 0.125, -0.1041666641831398),
            (0.6362500190734863, 0.125, -0.1041666641831398),
            (0.6362500190734863, -0.125, -0.1041666641831398),
            (-0.2824999988079071, -0.125, -0.1041666641831398),
            (0.45749998092651367, 0.125, -0.1041666641831398),
            (0.45749998092651367, -0.125, -0.1041666641831398),
            (-0.11249999701976776, 0.125, -0.1041666641831398),
            (-0.11249999701976776, -0.125, -0.1041666641831398),
            (0.6200000047683716, 0.125, 0.0625),
            (0.6200000047683716, -0.125, 0.0625),
            (0.5325000286102295, 0.125, 0.0625),
            (0.5325000286102295, -0.125, 0.0625),
            (0.6362500190734863, 0.125, 0.2291666567325592),
            (0.6362500190734863, -0.125, 0.2291666567325592),
            (0.5075000524520874, -0.125, 0.2291666567325592),
            (0.5075000524520874, 0.125, 0.2291666567325592),
            (-0.2824999988079071, -0.125, 0.2291666567325592),
            (-0.2824999988079071, 0.125, 0.2291666567325592),
            (-0.16249999403953552, 0.125, 0.2291666567325592),
            (-0.16249999403953552, -0.125, 0.2291666567325592),
            (-0.2824999988079071, -0.125, 0.0625),
            (-0.2824999988079071, 0.125, 0.0625),
            (-0.1875, 0.125, 0.0625),
            (-0.1875, -0.125, 0.0625),
            (-0.1824999898672104, 0.125, -0.14999999105930328),
            (-0.19749999046325684, -0.125, 0.3125),
            (-0.2224999964237213, -0.125, -0.020833328366279602),
            (-0.23499999940395355, -0.125, 0.1458333283662796),
            (-0.19749999046325684, 0.125, 0.3125),
            (-0.1824999898672104, -0.125, -0.14999999105930328),
            (-0.2224999964237213, 0.125, -0.020833328366279602),
            (-0.23499999940395355, 0.125, 0.1458333283662796),
            (-0.19749999046325684, 0.125, -0.1041666641831398),
            (-0.19749999046325684, -0.125, -0.1041666641831398),
            (-0.2224999964237213, 0.125, 0.2291666567325592),
            (-0.2224999964237213, -0.125, 0.2291666567325592),
            (-0.23499999940395355, 0.125, 0.0625),
            (-0.23499999940395355, -0.125, 0.0625),
           ]
    
    faces= [(47, 17, 7, 44),
            (44, 7, 5, 45),
            (67, 57, 1, 48),
            (16, 6, 4, 18),
            (65, 58, 8, 35),
            (69, 59, 9, 52),
            (33, 13, 15, 34),
            (40, 12, 14, 41),
            (36, 22, 13, 33),
            (42, 23, 12, 40),
            (39, 38, 30, 26),
            (41, 14, 21, 43),
            (34, 15, 20, 37),
            (24, 16, 18, 29),
            (45, 5, 19, 46),
            (66, 60, 28, 50),
            (56, 24, 29, 61),
            (64, 62, 30, 38),
            (68, 63, 31, 54),
            (38, 39, 37, 36),
            (18, 37, 39, 29),
            (56, 64, 38, 24),
            (4, 34, 37, 18),
            (24, 38, 36, 16),
            (16, 36, 33, 6),
            (6, 33, 34, 4),
            (61, 65, 35, 0),
            (15, 41, 43, 20),
            (22, 42, 40, 13),
            (13, 40, 41, 15),
            (14, 45, 46, 21),
            (12, 44, 45, 14),
            (23, 47, 44, 12),
            (63, 66, 50, 31),
            (59, 67, 48, 9),
            (54, 31, 27, 55),
            (31, 50, 51, 27),
            (25, 51, 50, 28),
            (37, 20, 22, 36),
            (22, 20, 43, 42),
            (42, 43, 21, 23),
            (21, 46, 47, 23),
            (17, 47, 46, 19),
            (30, 54, 55, 26),
            (62, 68, 54, 30),
            (58, 69, 52, 8),
            (26, 55, 69, 58),
            (11, 53, 68, 62),
            (27, 51, 67, 59),
            (10, 49, 66, 63),
            (29, 39, 65, 61),
            (2, 32, 64, 56),
            (53, 10, 63, 68),
            (32, 11, 62, 64),
            (2, 56, 61, 0),
            (49, 3, 60, 66),
            (55, 27, 59, 69),
            (39, 26, 58, 65),
            (51, 25, 57, 67),
           ]
    
    #Make the loop guard object:
    lg_mesh = bpy.data.meshes.new("loop_guard")
    loop_guard_obj = bpy.data.objects.new("Loop_Guard_Obj", lg_mesh)

    scene = bpy.context.scene
    scene.objects.link(loop_guard_obj)
    bm = bmesh.new()
    
    #Add verts, then faces:
    for v_co in verts:
        bm.verts.new(v_co)

    bm.verts.ensure_lookup_table()
    for f_idx in faces:
        bm.faces.new([bm.verts[i] for i in f_idx])
    
    #Smooth certain faces:
    smooth_f_index= [1, 6, 7, 10, 16, 25,
                     29, 31, 35, 36, 37, 38,
                     39, 40, 41, 42, 43, 54,]
    
    bm.verts.ensure_lookup_table()
    bm.edges.ensure_lookup_table()
    bm.faces.ensure_lookup_table()
    for i in smooth_f_index:
        bm.faces[i].smooth = True
    
    #Bevel it:
    if str > 0.0 and seg > 0:
        
        #The bevel was messed up unless 
        #the whole mesh was all beveled
        new_geom = bmesh.ops.bevel(bm, 
                                   geom=bm.verts[:] + bm.edges[:], 
                                   offset=str, 
                                   offset_type=0, 
                                   segments=seg, 
                                   profile=0.5, 
                                   clamp_overlap=True,)
        
        #Smooth the beveled faces:
        new_faces = new_geom["faces"]
        
        for f in new_faces:
            f.smooth = True
        
        
        #So now figure out which of the
        #faces should not become smooth
        side_faces = flat_faces(bm.faces, "Y", "-")
        side_faces += flat_faces(bm.faces, "Y", "+")
        side_faces += flat_faces(bm.faces, "Z", "-")
        
        for f in side_faces:
            f.smooth = False
    
    #Finalize changes:
    bm.to_mesh(lg_mesh)
    bm.free()
    lg_mesh.update()
    
    return loop_guard_obj

def make_trigger(str, seg, x0, x1, width, height):
    
    verts= [(-0.05085679888725281, -0.01654580608010292, -0.06327793002128601),
            (-0.11467128992080688, -0.03217080608010292, 0.3075714707374573),
            (-0.05085679888725281, 0.01470419391989708, -0.06327793002128601),
            (-0.11467128992080688, 0.03032919391989708, 0.3075714707374573),
            (0.004078708589076996, -0.01654580608010292, -0.06742852926254272),
            (0.035328708589076996, -0.03217080608010292, 0.3075714707374573),
            (0.004078708589076996, 0.01470419391989708, -0.06742852926254272),
            (0.035328708589076996, 0.03032919391989708, 0.3075714707374573),
            (-0.10242439806461334, -0.02045205608010292, 0.02631862461566925),
            (-0.13257378339767456, -0.02435830608010292, 0.11778898537158966),
            (-0.13433164358139038, -0.02826455608010292, 0.2117433100938797),
            (-0.13433164358139038, 0.02642294391989708, 0.2117433249950409),
            (-0.13257378339767456, 0.02251669391989708, 0.11778900027275085),
            (-0.10242439806461334, 0.01861044391989708, 0.02631862461566925),
            (-0.00823378935456276, 0.02642294391989708, 0.21382148563861847),
            (-0.030296295881271362, 0.02251669391989708, 0.12007148563861847),
            (-0.023858793079853058, 0.01861044391989708, 0.026321470737457275),
            (-0.00823378935456276, -0.02826455608010292, 0.21382148563861847),
            (-0.030296295881271362, -0.02435830608010292, 0.12007148563861847),
            (-0.023858793079853058, -0.02045205608010292, 0.026321470737457275),
           ]
    
    faces= [(10, 1, 3, 11),
            (11, 3, 7, 14),
            (14, 7, 5, 17),
            (17, 5, 1, 10),
            (2, 6, 4, 0),
            (4, 19, 8, 0),
            (19, 18, 9, 8),
            (18, 17, 10, 9),
            (6, 16, 19, 4),
            (16, 15, 18, 19),
            (15, 14, 17, 18),
            (2, 13, 16, 6),
            (13, 12, 15, 16),
            (12, 11, 14, 15),
            (0, 8, 13, 2),
            (8, 9, 12, 13),
            (9, 10, 11, 12),
           ]
    
    #Make the trigger object:
    t_mesh = bpy.data.meshes.new("trigger")
    trigger_obj = bpy.data.objects.new("Trigger_Obj", t_mesh)

    scene = bpy.context.scene
    scene.objects.link(trigger_obj)
    bm = bmesh.new()
    
    #Add verts, then faces:
    for v_co in verts:
        bm.verts.new(v_co)

    bm.verts.ensure_lookup_table()
    for f_idx in faces:
        bm.faces.new([bm.verts[i] for i in f_idx])
    
    bm.verts.ensure_lookup_table()
    bm.edges.ensure_lookup_table()
    bm.faces.ensure_lookup_table()
    
    flat_f_index= [1, 3, 5, 6, 7, 11, 12, 13,]
    
    #Smooth all faces:
    for f in bm.faces:
        f.smooth = True
    #Except these:
    for i in flat_f_index:
        bm.faces[i].smooth = False
    
    #Bevel it:
    if str > 0.0 and seg > 0:
        
        edge_index = [0, 1, 3, 6, 7, 9,
                      12, 13, 14, 15, 16, 18,
                      19, 21, 22, 23, 24, 25,
                      26, 27, 28, 29, 31, 33,
                      34, 35,]
        
        edge_geom = [bm.edges[i] for i in edge_index]
        vert_geom = verts_from_edges(edge_geom)
        
        new_geom = bmesh.ops.bevel(bm, 
                                   geom=vert_geom[:] + edge_geom[:], 
                                   offset=str, 
                                   offset_type=0, 
                                   segments=seg, 
                                   profile=0.5, 
                                   clamp_overlap=True,)
        new_faces = new_geom["faces"]
        
        #Smooth the new stuff:
        for f in new_faces:
            f.smooth = True
    
    #Finalize changes:
    bm.to_mesh(t_mesh)
    bm.free()
    t_mesh.update()
    
    return trigger_obj

def make_magazine(str, seg, l, w, h, t, forward):
    #Basic geometry:
    verts= [(-0.770403265953064, -0.094251349568367,0.5),
            (-0.8326334953308105, 0.0624350905418396, 0.5),
            (-0.3408868610858917, 0.094574935734272, 0.45000001788139343),
            (-0.2425059825181961, 0.0759991705417633, 0.4000000059604645),
            (-0.8326334953308105, -0.061304330825805664, 0.5),
            (-0.8326334953308105, 0.000643962703179568, 0.5),
            (-0.24404554069042206, -0.07816824316978455, 0.4000000059604645),
            (-0.23142261803150177, -0.001763109234161675, 0.4000000059604645),
            (-0.34337398409843445, -0.094251349568367, 0.45000001788139343),
            (-0.5510804653167725, -0.094251349568367, 0.5),
            (-0.7679338455200195, 0.094574935734272, 0.5),
            (-0.5486143827438354, 0.094574935734272, 0.5),
            (-0.8326334953308105, -0.094251349568367, 0.5),
            (-0.8326334953308105, 0.094574935734272, 0.5),
            (-0.25047624111175537, -0.094251349568367, 0.4000000059604645),
            (-0.24872086942195892, 0.094574935734272, 0.4000000059604645),
            (-0.8326334953308105, -0.03397730737924576, 0.5),
            (-0.8326334953308105, 0.035221636295318604, 0.5),
            (-0.23500050604343414, -0.05585476756095886, 0.4000000059604645),
            (-0.2341184765100479, 0.052642032504081726, 0.4000000059604645),
            (-0.45029184222221375, -0.094251349568367, 0.5),
            (-0.6488437652587891, -0.094251349568367, 0.5),
            (-0.6463780403137207, 0.094574935734272, 0.5),
            (-0.44781556725502014, 0.094574935734272, 0.5),
            (-0.7711615562438965, -0.18904995918273926, -0.9621451497077942),
            (-0.8927211165428162, -0.18904995918273926, -0.9621451497077942),
            (-0.954951286315918, -0.18904995918273926, -0.9621451497077942),
            (-0.954951286315918, 0.06989601254463196, -0.9621451497077942),
            (-0.954951286315918, 0.12432292103767395, -0.9621451497077942),
            (-0.954951286315918, 0.18860261142253876, -0.9621451497077942),
            (-0.57013338804245, 0.18860261142253876, -0.9621451497077942),
            (-0.46320468187332153, 0.18860261142253876, -0.9621451497077942),
            (-0.3622886836528778, 0.18860261142253876, -0.9621451497077942),
            (-0.3476862907409668, 0.1047368049621582, -0.9621451497077942),
            (-0.356073796749115, 0.15145108103752136, -0.9621451497077942),
            (-0.954951286315918, -0.12315592169761658, -0.9621451497077942),
            (-0.954951286315918, -0.06850187480449677, -0.9621451497077942),
            (-0.954951286315918, 0.0007406653603538871, -0.9621451497077942),
            (-0.36404407024383545, -0.18904995918273926, -0.9621451497077942),
            (-0.35761335492134094, -0.15688374638557434, -0.9621451497077942),
            (-0.348568320274353, -0.11225679516792297, -0.9621451497077942),
            (-0.34499043226242065, -0.004073478747159243, -0.9621451497077942),
            (-0.46569180488586426, -0.18904995918273926, -0.9621451497077942),
            (-0.5726096630096436, -0.18904995918273926, -0.9621451497077942),
            (-0.6733983159065247, -0.18904995918273926, -0.9621451497077942),
            (-0.890251636505127, 0.18860261142253876, -0.9621451497077942),
            (-0.7686958909034729, 0.18860261142253876, -0.9621451497077942),
            (-0.6709322333335876, 0.18860261142253876, -0.9621451497077942),
            (-0.776584804058075, -0.19846732914447784, -0.9621451497077942),
            (-0.904222309589386, -0.19846732914447784, -0.9621451497077942),
            (-0.9695639610290527, -0.19846732914447784, -0.9621451497077942),
            (-0.9695639610290527, 0.07342592626810074, -0.9621451497077942),
            (-0.9695639610290527, 0.13057418167591095, -0.9621451497077942),
            (-0.9695639610290527, 0.19806784391403198, -0.9621451497077942),
            (-0.5655052065849304, 0.19806784391403198, -0.9621451497077942),
            (-0.453230082988739, 0.19806784391403198, -0.9621451497077942),
            (-0.347268283367157, 0.19806784391403198, -0.9621451497077942),
            (-0.3319357633590698, 0.11000875383615494, -0.9621451497077942),
            (-0.34074264764785767, 0.15905874967575073, -0.9621451497077942),
            (-0.9695639610290527, -0.12927860021591187, -0.9621451497077942),
            (-0.9695639610290527, -0.07189185172319412, -0.9621451497077942),
            (-0.9695639610290527, 0.0008128146291710436, -0.9621451497077942),
            (-0.3491114377975464, -0.19846732914447784, -0.9621451497077942),
            (-0.34235918521881104, -0.16469280421733856, -0.9621451497077942),
            (-0.33286190032958984, -0.11783451586961746, -0.9621451497077942),
            (-0.32910510897636414, -0.0042420364916324615, -0.9621451497077942),
            (-0.4558415412902832, -0.19846732914447784, -0.9621451497077942),
            (-0.5681052803993225, -0.19846732914447784, -0.9621451497077942),
            (-0.6739333868026733, -0.19846732914447784, -0.9621451497077942),
            (-0.9016293287277222, 0.19806784391403198, -0.9621451497077942),
            (-0.7739958167076111, 0.19806784391403198, -0.9621451497077942),
            (-0.671343982219696, 0.19806784391403198, -0.9621451497077942),
            (-0.776584804058075, -0.19846732914447784, -1.0021451711654663),
            (-0.904222309589386, -0.19846732914447784, -1.0021451711654663),
            (-0.9695639610290527, -0.19846732914447784, -1.0021451711654663),
            (-0.9695639610290527, 0.07342592626810074, -1.0021451711654663),
            (-0.9695639610290527, 0.13057418167591095, -1.0021451711654663),
            (-0.9695639610290527, 0.19806784391403198, -1.0021451711654663),
            (-0.5655052065849304, 0.19806784391403198, -1.0021451711654663),
            (-0.453230082988739, 0.19806784391403198, -1.0021451711654663),
            (-0.347268283367157, 0.19806784391403198, -1.0021451711654663),
            (-0.3319357633590698, 0.11000875383615494, -1.0021451711654663),
            (-0.34074264764785767, 0.15905874967575073, -1.0021451711654663),
            (-0.9695639610290527, -0.12927860021591187, -1.0021451711654663),
            (-0.9695639610290527, -0.07189185172319412, -1.0021451711654663),
            (-0.9695639610290527, 0.0008128146291710436, -1.0021451711654663),
            (-0.3491114377975464, -0.19846732914447784, -1.0021451711654663),
            (-0.34235918521881104, -0.16469280421733856, -1.0021451711654663),
            (-0.33286190032958984, -0.11783451586961746, -1.0021451711654663),
            (-0.32910510897636414, -0.0042420364916324615, -1.0021451711654663),
            (-0.4558415412902832, -0.19846732914447784, -1.0021451711654663),
            (-0.5681052803993225, -0.19846732914447784, -1.0021451711654663),
            (-0.6739333868026733, -0.19846732914447784, -1.0021451711654663),
            (-0.9016293287277222, 0.19806784391403198, -1.0021451711654663),
            (-0.7739958167076111, 0.19806784391403198, -1.0021451711654663),
            (-0.671343982219696, 0.19806784391403198, -1.0021451711654663),
            (-0.8632129430770874, -0.12274547666311264, 0.13446372747421265),
            (-0.8632129430770874, -0.18863952159881592, 0.13446369767189026),
            (-0.4783950448036194, 0.1890130639076233, 0.13446372747421265),
            (-0.5791938304901123, 0.1890130639076233, 0.13446369767189026),
            (-0.8009827136993408, -0.18863952159881592, 0.13446369767189026),
            (-0.3739534616470337, -0.18863952159881592, 0.13446372747421265),
            (-0.2723057270050049, -0.18863952159881592, 0.13446369767189026),
            (-0.8632129430770874, -0.06809142976999283, 0.13446372747421265),
            (-0.8632129430770874, 0.12473336607217789, 0.13446372747421265),
            (-0.8632129430770874, 0.0703064575791359, 0.13446369767189026),
            (-0.480871319770813, -0.18863952159881592, 0.13446372747421265),
            (-0.8632129430770874, 0.0011511103948578238, 0.13446372747421265),
            (-0.8632129430770874, 0.1890130639076233, 0.13446372747421265),
            (-0.5816599130630493, -0.18863952159881592, 0.13446372747421265),
            (-0.37146633863449097, 0.1890130639076233, 0.13446372747421265),
            (-0.6794232130050659, -0.18863952159881592, 0.13446372747421265),
            (-0.265874981880188, -0.156473308801651, 0.13446369767189026),
            (-0.27055031061172485, 0.1890130639076233, 0.13446372747421265),
            (-0.7985132932662964, 0.1890130639076233, 0.13446372747421265),
            (-0.25682997703552246, -0.11184635013341904, 0.13446369767189026),
            (-0.25594794750213623, 0.10514724999666214, 0.13446372747421265),
            (-0.2643354535102844, 0.1518615186214447, 0.13446369767189026),
            (-0.6769574880599976, 0.1890130639076233, 0.13446372747421265),
            (-0.2532520890235901, -0.003663033712655306, 0.13446369767189026),
            (-0.8429540395736694, -0.1576341837644577, 0.376631498336792),
            (-0.5589349269866943, 0.1580597460269928, 0.3766314685344696),
            (-0.7807238101959229, -0.1576341837644577, 0.376631498336792),
            (-0.2520468235015869, -0.1576341837644577, 0.376631498336792),
            (-0.8429540395736694, 0.0588284507393837, 0.376631498336792),
            (-0.2456160932779312, -0.13074526190757751, 0.376631498336792),
            (-0.2365710735321045, -0.09343990683555603, 0.376631498336792),
            (-0.24407655000686646, 0.12700338661670685, 0.376631498336792),
            (-0.23299318552017212, -0.0030054172966629267, 0.376631498336792),
            (-0.8429540395736694, -0.10255090147256851, 0.376631498336792),
            (-0.4581361413002014, 0.1580597460269928, 0.376631498336792),
            (-0.3536945581436157, -0.1576341837644577, 0.376631498336792),
            (-0.8429540395736694, -0.05686353147029877, 0.376631498336792),
            (-0.8429540395736694, 0.10432594269514084, 0.376631498336792),
            (-0.460612416267395, -0.1576341837644577, 0.376631498336792),
            (-0.8429540395736694, 0.001018906245008111, 0.376631498336792),
            (-0.8429540395736694, 0.1580597460269928, 0.376631498336792),
            (-0.5614010095596313, -0.1576341837644577, 0.376631498336792),
            (-0.351207435131073, 0.1580597460269928, 0.376631498336792),
            (-0.659164309501648, -0.1576341837644577, 0.376631498336792),
            (-0.2502914369106293, 0.1580597460269928, 0.376631498336792),
            (-0.7782543897628784, 0.1580597460269928, 0.376631498336792),
            (-0.23568904399871826, 0.08795318007469177, 0.376631498336792),
            (-0.6566985845565796, 0.1580597460269928, 0.376631498336792),
            (-0.782903254032135, -0.094251349568367, 0.2666666805744171),
            (-0.8451334834098816, 0.0624350905418396, 0.2666666805744171),
            (-0.35338687896728516, 0.094574935734272, 0.2666666805744171),
            (-0.25500598549842834, 0.0759991705417633, 0.2666666805744171),
            (-0.8451334834098816, -0.061304330825805664, 0.2666666805744171),
            (-0.8451334834098816, 0.000643962703179568, 0.2666666805744171),
            (-0.2565455436706543, -0.07816824316978455, 0.2666666805744171),
            (-0.24392260611057281, -0.001763109234161675, 0.2666666805744171),
            (-0.3558740019798279, -0.094251349568367, 0.2666666805744171),
            (-0.5635804533958435, -0.094251349568367, 0.2666666805744171),
            (-0.7804338335990906, 0.094574935734272, 0.2666666805744171),
            (-0.5611143708229065, 0.094574935734272, 0.2666666805744171),
            (-0.8451334834098816, -0.094251349568367, 0.2666666805744171),
            (-0.8451334834098816, 0.094574935734272, 0.2666666805744171),
            (-0.2629762589931488, -0.094251349568367, 0.2666666805744171),
            (-0.26122087240219116, 0.094574935734272, 0.2666666805744171),
            (-0.8451334834098816, -0.03397730737924576, 0.2666666805744171),
            (-0.8451334834098816, 0.035221636295318604, 0.2666666805744171),
            (-0.2475004941225052, -0.05585476756095886, 0.2666666805744171),
            (-0.24661846458911896, 0.052642032504081726, 0.2666666805744171),
            (-0.4627918601036072, -0.094251349568367, 0.2666666805744171),
            (-0.6613437533378601, -0.094251349568367, 0.2666666805744171),
            (-0.6588780283927917, 0.094574935734272, 0.2666666805744171),
            (-0.4603155851364136, 0.094574935734272, 0.2666666805744171),
           ]
           
    faces= [(97, 96, 35, 26),
            (99, 98, 30, 47),
            (100, 97, 26, 25),
            (102, 101, 42, 38),
            (96, 103, 36, 35),
            (105, 104, 28, 27),
            (101, 106, 43, 42),
            (103, 107, 37, 36),
            (104, 108, 29, 28),
            (106, 109, 44, 43),
            (107, 105, 27, 37),
            (98, 110, 31, 30),
            (109, 111, 24, 44),
            (112, 102, 38, 39),
            (110, 113, 32, 31),
            (108, 114, 45, 29),
            (115, 112, 39, 40),
            (117, 116, 33, 34),
            (114, 118, 46, 45),
            (119, 115, 40, 41),
            (113, 117, 34, 32),
            (118, 99, 47, 46),
            (111, 100, 25, 24),
            (116, 119, 41, 33),
            (33, 41, 65, 57),
            (24, 25, 49, 48),
            (46, 47, 71, 70),
            (32, 34, 58, 56),
            (41, 40, 64, 65),
            (45, 46, 70, 69),
            (34, 33, 57, 58),
            (40, 39, 63, 64),
            (29, 45, 69, 53),
            (31, 32, 56, 55),
            (39, 38, 62, 63),
            (44, 24, 48, 68),
            (30, 31, 55, 54),
            (37, 27, 51, 61),
            (43, 44, 68, 67),
            (28, 29, 53, 52),
            (36, 37, 61, 60),
            (42, 43, 67, 66),
            (27, 28, 52, 51),
            (35, 36, 60, 59),
            (38, 42, 66, 62),
            (25, 26, 50, 49),
            (47, 30, 54, 71),
            (26, 35, 59, 50),
            (69, 70, 94, 93),
            (90, 91, 92, 72, 73, 74, 83, 84, 
            85, 75, 76, 77, 93, 94, 95, 78, 
            79, 80, 82, 81, 89, 88, 87, 86),
            (65, 64, 88, 89),
            (56, 58, 82, 80),
            (70, 71, 95, 94),
            (48, 49, 73, 72),
            (57, 65, 89, 81),
            (50, 59, 83, 74),
            (71, 54, 78, 95),
            (49, 50, 74, 73),
            (62, 66, 90, 86),
            (59, 60, 84, 83),
            (51, 52, 76, 75),
            (66, 67, 91, 90),
            (60, 61, 85, 84),
            (52, 53, 77, 76),
            (67, 68, 92, 91),
            (61, 51, 75, 85),
            (54, 55, 79, 78),
            (68, 48, 72, 92),
            (63, 62, 86, 87),
            (55, 56, 80, 79),
            (53, 69, 93, 77),
            (64, 63, 87, 88),
            (58, 57, 81, 82),
            (142, 128, 119, 116),
            (139, 122, 100, 111),
            (143, 121, 99, 118),
            (140, 127, 117, 113),
            (128, 126, 115, 119),
            (141, 143, 118, 114),
            (127, 142, 116, 117),
            (126, 125, 112, 115),
            (136, 141, 114, 108),
            (138, 140, 113, 110),
            (125, 123, 102, 112),
            (137, 139, 111, 109),
            (130, 138, 110, 98),
            (135, 124, 105, 107),
            (134, 137, 109, 106),
            (133, 136, 108, 104),
            (132, 135, 107, 103),
            (131, 134, 106, 101),
            (124, 133, 104, 105),
            (129, 132, 103, 96),
            (123, 131, 101, 102),
            (122, 120, 97, 100),
            (121, 130, 98, 99),
            (120, 129, 96, 97),
            (12, 4, 129, 120),
            (11, 23, 130, 121),
            (0, 12, 120, 122),
            (14, 8, 131, 123),
            (4, 16, 132, 129),
            (17, 1, 133, 124),
            (8, 20, 134, 131),
            (16, 5, 135, 132),
            (1, 13, 136, 133),
            (20, 9, 137, 134),
            (5, 17, 124, 135),
            (23, 2, 138, 130),
            (9, 21, 139, 137),
            (6, 14, 123, 125),
            (2, 15, 140, 138),
            (13, 10, 141, 136),
            (18, 6, 125, 126),
            (3, 19, 142, 127),
            (10, 22, 143, 141),
            (7, 18, 126, 128),
            (15, 3, 127, 140),
            (22, 11, 121, 143),
            (21, 0, 122, 139),
            (19, 7, 128, 142),
            (7, 19, 163, 151),
            (4, 12, 156, 148),
            (23, 11, 155, 167),
            (12, 0, 144, 156),
            (8, 14, 158, 152),
            (16, 4, 148, 160),
            (1, 17, 161, 145),
            (20, 8, 152, 164),
            (5, 16, 160, 149),
            (13, 1, 145, 157),
            (9, 20, 164, 153),
            (17, 5, 149, 161),
            (2, 23, 167, 146),
            (21, 9, 153, 165),
            (14, 6, 150, 158),
            (15, 2, 146, 159),
            (10, 13, 157, 154),
            (6, 18, 162, 150),
            (19, 3, 147, 163),
            (22, 10, 154, 166),
            (18, 7, 151, 162),
            (3, 15, 159, 147),
            (11, 22, 166, 155),
            (0, 21, 165, 144),
            (165, 153, 164, 152, 158, 150, 162, 151, 
            163, 147, 159, 146, 167, 155, 166, 154, 
            157, 145, 161, 149, 160, 148, 156, 144),
           ]
    
    #Make the magazine object:
    m_mesh = bpy.data.meshes.new("magazine")
    magazine_obj = bpy.data.objects.new("Magazine_Obj", m_mesh)

    scene = bpy.context.scene
    scene.objects.link(magazine_obj)
    bm = bmesh.new()
    
    #Add verts, then faces:
    for v_co in verts:
        bm.verts.new(v_co)
    
    bm.verts.ensure_lookup_table()
    for f_idx in faces:
        bm.faces.new([bm.verts[i] for i in f_idx])
    
    smooth_f_index= [13, 16, 17, 19, 20, 23,
                     50, 51, 54, 68, 71, 72,
                     73, 74, 75, 76, 77, 78,
                     79, 80, 81, 82, 83, 84,
                     85, 87, 90, 93, 94, 95,
                     98, 99, 100, 103, 106, 108,
                     109, 110, 111, 112, 113, 114,
                     115, 116, 117, 118, 119, 120,
                     121, 135, 138, 139, 141, 142,
                    ]
    
    bm.faces.ensure_lookup_table()
    for i in smooth_f_index:
        bm.faces[i].smooth = True
    
    #Finalize changes:
    bm.to_mesh(m_mesh)
    bm.free()
    m_mesh.update()
    
    return magazine_obj

def make_bullet():
    #Basic geometry:
    verts= [(-0.7879311442375183, 0.08742246776819229, 0.39166662096977234),
            (-0.7879311442375183, 0.08076192438602448, 0.35818183422088623),
            (-0.7879311442375183, 0.06179431080818176, 0.3297947943210602),
            (-0.7879311442375183, 0.033407267183065414, 0.3108271658420563),
            (-0.7879311442375183, -7.753519457764924e-05, 0.30416664481163025),
            (-0.7879311442375183, -0.03356233611702919, 0.3108271658420563),
            (-0.7879311442375183, -0.06194937229156494, 0.3297947943210602),
            (-0.7879311442375183, -0.08091698586940765, 0.35818183422088623),
            (-0.7879311442375183, -0.08757752925157547, 0.39166662096977234),
            (-0.7879311442375183, -0.08091699331998825, 0.42515140771865845),
            (-0.7879311442375183, -0.06194939464330673, 0.4535384476184845),
            (-0.7879311442375183, -0.03356234356760979, 0.4725060760974884),
            (-0.7879311442375183, -7.753032696200535e-05, 0.4791666269302368),
            (-0.42543110251426697, -7.753032696200535e-05, 0.4791666269302368),
            (-0.7879311442375183, 0.03340728580951691, 0.4725060760974884),
            (-0.7879311442375183, 0.06179433315992355, 0.4535384476184845),
            (-0.7879311442375183, 0.08076194673776627, 0.42515140771865845),
            (-0.8004311323165894, 0.08742246776819229, 0.39166662096977234),
            (-0.8004311323165894, 0.08076192438602448, 0.35818183422088623),
            (-0.8004311323165894, 0.06179431080818176, 0.3297947943210602),
            (-0.8004311323165894, 0.033407267183065414, 0.3108271658420563),
            (-0.8004311323165894, -7.753519457764924e-05, 0.30416664481163025),
            (-0.8004311323165894, -0.03356233611702919, 0.3108271658420563),
            (-0.8004311323165894, -0.06194937229156494, 0.3297947943210602),
            (-0.8004311323165894, -0.08091698586940765, 0.35818183422088623),
            (-0.8004311323165894, -0.08757752925157547, 0.39166662096977234),
            (-0.8004311323165894, -0.08091699331998825, 0.42515140771865845),
            (-0.8004311323165894, -0.06194939464330673, 0.4535384476184845),
            (-0.8004311323165894, -0.03356234356760979, 0.4725060760974884),
            (-0.8004311323165894, -7.753032696200535e-05, 0.4791666269302368),
            (-0.8004311323165894, 0.03340728580951691, 0.4725060760974884),
            (-0.8004311323165894, 0.06179433315992355, 0.4535384476184845),
            (-0.8004311323165894, 0.08076194673776627, 0.42515140771865845),
            (-0.8254311084747314, 0.08742246776819229, 0.39166662096977234),
            (-0.8254311084747314, 0.08076192438602448, 0.35818183422088623),
            (-0.8254311084747314, 0.06179431080818176, 0.3297947943210602),
            (-0.8254311084747314, 0.033407267183065414, 0.3108271658420563),
            (-0.8254311084747314, -7.753519457764924e-05, 0.30416664481163025),
            (-0.8254311084747314, -0.03356233611702919, 0.3108271658420563),
            (-0.8254311084747314, -0.06194937229156494, 0.3297947943210602),
            (-0.8254311084747314, -0.08091698586940765, 0.35818183422088623),
            (-0.8254311084747314, -0.08757752925157547, 0.39166662096977234),
            (-0.8254311084747314, -0.08091699331998825, 0.42515140771865845),
            (-0.8254311084747314, -0.06194939464330673, 0.4535384476184845),
            (-0.8254311084747314, -0.03356234356760979, 0.4725060760974884),
            (-0.8254311084747314, -7.753032696200535e-05, 0.4791666269302368),
            (-0.8254311084747314, 0.03340728580951691, 0.4725060760974884),
            (-0.8254311084747314, 0.06179433315992355, 0.4535384476184845),
            (-0.8254311084747314, 0.08076194673776627, 0.42515140771865845),
            (-0.7879311442375183, 0.0808599665760994, 0.39166662096977234),
            (-0.7879311442375183, 0.07469896972179413, 0.36069318652153015),
            (-0.7879311442375183, 0.05715392529964447, 0.33443519473075867),
            (-0.7879311442375183, 0.030895905569195747, 0.316890150308609),
            (-0.7879311442375183, -7.753476529615e-05, 0.31072914600372314),
            (-0.7879311442375183, -0.03105097822844982, 0.316890150308609),
            (-0.7879311442375183, -0.05730897933244705, 0.33443519473075867),
            (-0.7879311442375183, -0.07485403120517731, 0.36069318652153015),
            (-0.7879311442375183, -0.08101502805948257, 0.39166662096977234),
            (-0.7879311442375183, -0.07485403120517731, 0.4226400554180145),
            (-0.7879311442375183, -0.05730900168418884, 0.4488980770111084),
            (-0.7879311442375183, -0.03105098381638527, 0.46644312143325806),
            (-0.7879311442375183, -7.753026147838682e-05, 0.4726041257381439),
            (-0.7879311442375183, 0.03089592605829239, 0.46644312143325806),
            (-0.7879311442375183, 0.05715394765138626, 0.4488980770111084),
            (-0.7879311442375183, 0.07469898462295532, 0.4226400554180145),
            (-0.8004311323165894, 0.0808599665760994, 0.39166662096977234),
            (-0.8004311323165894, 0.07469896972179413, 0.36069318652153015),
            (-0.8004311323165894, 0.05715392529964447, 0.33443519473075867),
            (-0.8004311323165894, 0.030895905569195747, 0.316890150308609),
            (-0.8004311323165894, -7.753476529615e-05, 0.31072914600372314),
            (-0.8004311323165894, -0.03105097822844982, 0.316890150308609),
            (-0.8004311323165894, -0.05730897933244705, 0.33443519473075867),
            (-0.8004311323165894, -0.07485403120517731, 0.36069318652153015),
            (-0.8004311323165894, -0.08101502805948257, 0.39166662096977234),
            (-0.8004311323165894, -0.07485403120517731, 0.4226400554180145),
            (-0.8004311323165894, -0.05730900168418884, 0.4488980770111084),
            (-0.8004311323165894, -0.03105098381638527, 0.46644312143325806),
            (-0.8004311323165894, -7.753026147838682e-05, 0.4726041257381439),
            (-0.8004311323165894, 0.03089592605829239, 0.46644312143325806),
            (-0.8004311323165894, 0.05715394765138626, 0.4488980770111084),
            (-0.8004311323165894, 0.07469898462295532, 0.4226400554180145),
            (-0.30168744921684265, 0.06179431080818176, 0.39166662096977234),
            (-0.35846152901649475, 0.08076192438602448, 0.3916666507720947),
            (-0.2637522220611572, 0.030858393758535385, 0.3788525462150574),
            (-0.30168744921684265, 0.057084593921899796, 0.36798930168151855),
            (-0.35846152901649475, 0.07460838556289673, 0.36073073744773865),
            (-0.42543110251426697, 0.08076192438602448, 0.35818183422088623),
            (-0.2637522220611572, 0.02359980344772339, 0.36798930168151855),
            (-0.30168744921684265, 0.04367246478796005, 0.3479166030883789),
            (-0.35846155881881714, 0.057084593921899796, 0.33450451493263245),
            (-0.42543113231658936, 0.061794307082891464, 0.3297947943210602),
            (-0.2637522220611572, 0.012736553326249123, 0.36073070764541626),
            (-0.30168747901916504, 0.023599795997142792, 0.33450448513031006),
            (-0.35846155881881714, 0.030858388170599937, 0.3169807493686676),
            (-0.42543113231658936, 0.033407263457775116, 0.31082719564437866),
            (-0.2637522220611572, -7.752105011604726e-05, 0.35818183422088623),
            (-0.30168747901916504, -7.752850069664419e-05, 0.3297947943210602),
            (-0.35846155881881714, -7.752663805149496e-05, 0.31082722544670105),
            (-0.42543113231658936, -7.753408863209188e-05, 0.30416667461395264),
            (-0.2637522220611572, -0.012891597114503384, 0.36073070764541626),
            (-0.30168747901916504, -0.023754850029945374, 0.33450451493263245),
            (-0.35846155881881714, -0.03101343847811222, 0.3169807493686676),
            (-0.42543113231658936, -0.03356232866644859, 0.31082722544670105),
            (-0.2637522220611572, -0.023754840716719627, 0.36798930168151855),
            (-0.30168744921684265, -0.04382751137018204, 0.3479166328907013),
            (-0.35846155881881714, -0.05723963677883148, 0.33450454473495483),
            (-0.42543113231658936, -0.061949361115694046, 0.32979485392570496),
            (-0.2637522220611572, -0.031013427302241325, 0.3788525462150574),
            (-0.30168744921684265, -0.057239629328250885, 0.36798930168151855),
            (-0.35846152901649475, -0.07476341724395752, 0.36073073744773865),
            (-0.42543110251426697, -0.08091696351766586, 0.3581818640232086),
            (-0.2637522220611572, -0.033562302589416504, 0.39166662096977234),
            (-0.30168744921684265, -0.06194933503866196, 0.39166662096977234),
            (-0.35846152901649475, -0.08091694116592407, 0.3916666805744171),
            (-0.42543110251426697, -0.08757749199867249, 0.3916666805744171),
            (-0.2637522220611572, -0.031013421714305878, 0.4044806957244873),
            (-0.30168744921684265, -0.05723961442708969, 0.4153439402580261),
            (-0.35846152901649475, -0.07476339489221573, 0.4226025640964508),
            (-0.42543110251426697, -0.08091693371534348, 0.4251514673233032),
            (-0.2637522220611572, -0.023754829540848732, 0.4153439402580261),
            (-0.30168744921684265, -0.04382748156785965, 0.4354166090488434),
            (-0.35846152901649475, -0.0572395995259285, 0.4488287568092346),
            (-0.42543110251426697, -0.06194930523633957, 0.4535384774208069),
            (-0.2637522220611572, -0.01289158221334219, 0.4226025342941284),
            (-0.30168744921684265, -0.02375481277704239, 0.44882872700691223),
            (-0.35846152901649475, -0.03101339377462864, 0.46635255217552185),
            (-0.42543110251426697, -0.03356226533651352, 0.4725061058998108),
            (-0.2637522220611572, -7.750708027742803e-05, 0.42515140771865845),
            (-0.30168744921684265, -7.74931104388088e-05, 0.4535384178161621),
            (-0.35846152901649475, -7.748379721306264e-05, 0.4725060760974884),
            (-0.2637522220611572, 0.012736564502120018, 0.42260250449180603),
            (-0.30168744921684265, 0.02359982393682003, 0.44882869720458984),
            (-0.35846152901649475, 0.030858423560857773, 0.46635252237319946),
            (-0.42543110251426697, 0.033407315611839294, 0.472506046295166),
            (-0.2637522220611572, 0.023599809035658836, 0.41534391045570374),
            (-0.30168744921684265, 0.04367247223854065, 0.4354165494441986),
            (-0.35846152901649475, 0.05708461254835129, 0.44882869720458984),
            (-0.42543110251426697, 0.06179434061050415, 0.4535384178161621),
            (-0.2637522220611572, 0.030858393758535385, 0.4044806659221649),
            (-0.30168744921684265, 0.0570845827460289, 0.41534388065338135),
            (-0.35846152901649475, 0.07460837811231613, 0.42260250449180603),
            (-0.42543110251426697, 0.08076193183660507, 0.42515137791633606),
            (-0.2504311203956604, -7.753136742394418e-05, 0.39166662096977234),
            (-0.2637522220611572, 0.033407263457775116, 0.39166659116744995),
            (-0.42543110251426697, 0.0874224454164505, 0.39166656136512756),
           ]
    
    faces= [(0, 144, 86, 1),
            (1, 86, 90, 2),
            (2, 90, 94, 3),
            (3, 94, 98, 4),
            (4, 98, 102, 5),
            (5, 102, 106, 6),
            (6, 106, 110, 7),
            (7, 110, 114, 8),
            (8, 114, 118, 9),
            (9, 118, 122, 10),
            (10, 122, 126, 11),
            (11, 126, 13, 12),
            (12, 13, 133, 14),
            (14, 133, 137, 15),
            (15, 137, 141, 16),
            (16, 141, 144, 0),
            (10, 11, 60, 59),
            (21, 22, 38, 37),
            (1, 2, 51, 50),
            (27, 26, 74, 75),
            (15, 16, 64, 63),
            (5, 6, 55, 54),
            (26, 25, 73, 74),
            (25, 24, 72, 73),
            (9, 10, 59, 58),
            (24, 23, 71, 72),
            (0, 1, 50, 49),
            (14, 15, 63, 62),
            (4, 5, 54, 53),
            (23, 22, 70, 71),
            (22, 21, 69, 70),
            (8, 9, 58, 57),
            (21, 20, 68, 69),
            (33, 34, 35, 36, 37, 38, 39, 40, 41, 
            42, 43, 44, 45, 46, 47, 48),
            (29, 30, 46, 45),
            (22, 23, 39, 38),
            (30, 31, 47, 46),
            (23, 24, 40, 39),
            (31, 32, 48, 47),
            (24, 25, 41, 40),
            (17, 18, 34, 33),
            (32, 17, 33, 48),
            (25, 26, 42, 41),
            (18, 19, 35, 34),
            (26, 27, 43, 42),
            (19, 20, 36, 35),
            (27, 28, 44, 43),
            (20, 21, 37, 36),
            (28, 29, 45, 44),
            (54, 55, 71, 70),
            (59, 60, 76, 75),
            (64, 49, 65, 80),
            (52, 53, 69, 68),
            (57, 58, 74, 73),
            (62, 63, 79, 78),
            (50, 51, 67, 66),
            (55, 56, 72, 71),
            (60, 61, 77, 76),
            (53, 54, 70, 69),
            (58, 59, 75, 74),
            (63, 64, 80, 79),
            (51, 52, 68, 67),
            (56, 57, 73, 72),
            (49, 50, 66, 65),
            (61, 62, 78, 77),
            (28, 27, 75, 76),
            (29, 28, 76, 77),
            (6, 7, 56, 55),
            (16, 0, 49, 64),
            (30, 29, 77, 78),
            (2, 3, 52, 51),
            (11, 12, 61, 60),
            (31, 30, 78, 79),
            (18, 17, 65, 66),
            (32, 31, 79, 80),
            (7, 8, 57, 56),
            (19, 18, 66, 67),
            (17, 32, 80, 65),
            (20, 19, 67, 68),
            (3, 4, 53, 52),
            (12, 14, 62, 61),
            (144, 82, 85, 86),
            (81, 143, 83, 84),
            (82, 81, 84, 85),
            (143, 142, 83),
            (85, 84, 88, 89),
            (83, 142, 87),
            (86, 85, 89, 90),
            (84, 83, 87, 88),
            (87, 142, 91),
            (90, 89, 93, 94),
            (88, 87, 91, 92),
            (89, 88, 92, 93),
            (94, 93, 97, 98),
            (92, 91, 95, 96),
            (93, 92, 96, 97),
            (91, 142, 95),
            (97, 96, 100, 101),
            (95, 142, 99),
            (98, 97, 101, 102),
            (96, 95, 99, 100),
            (101, 100, 104, 105),
            (99, 142, 103),
            (102, 101, 105, 106),
            (100, 99, 103, 104),
            (106, 105, 109, 110),
            (104, 103, 107, 108),
            (105, 104, 108, 109),
            (103, 142, 107),
            (110, 109, 113, 114),
            (108, 107, 111, 112),
            (109, 108, 112, 113),
            (107, 142, 111),
            (113, 112, 116, 117),
            (111, 142, 115),
            (114, 113, 117, 118),
            (112, 111, 115, 116),
            (117, 116, 120, 121),
            (115, 142, 119),
            (118, 117, 121, 122),
            (116, 115, 119, 120),
            (122, 121, 125, 126),
            (120, 119, 123, 124),
            (121, 120, 124, 125),
            (119, 142, 123),
            (124, 123, 127, 128),
            (125, 124, 128, 129),
            (123, 142, 127),
            (126, 125, 129, 13),
            (129, 128, 131, 132),
            (127, 142, 130),
            (13, 129, 132, 133),
            (128, 127, 130, 131),
            (130, 142, 134),
            (133, 132, 136, 137),
            (131, 130, 134, 135),
            (132, 131, 135, 136),
            (137, 136, 140, 141),
            (135, 134, 138, 139),
            (136, 135, 139, 140),
            (134, 142, 138),
            (140, 139, 81, 82),
            (138, 142, 143),
            (141, 140, 82, 144),
            (139, 138, 143, 81),
            ]
    
    #Make the bullet object:
    bu_mesh = bpy.data.meshes.new("bullet")
    bullet_obj = bpy.data.objects.new("Bullet_Obj", bu_mesh)

    scene = bpy.context.scene
    scene.objects.link(bullet_obj)
    bm = bmesh.new()
    
    #Add verts, then faces:
    for v_co in verts:
        bm.verts.new(v_co)

    bm.verts.ensure_lookup_table()
    for f_idx in faces:
        bm.faces.new([bm.verts[i] for i in f_idx])
    
    for f in bm.faces:
        f.smooth = True
    
    #Finalize changes:
    bm.to_mesh(bu_mesh)
    bm.free()
    bu_mesh.update()
    
    return bullet_obj

#Finds the average x, y, and z
#of all the verts in the bmesh
def get_center(bm):
    #Holds x, y, and z, respectively:
    center = [0, 0, 0]
    
    #Add up each value from each vert:
    for v in bm.verts:
        center[0] += v.co.x
        center[1] += v.co.y
        center[2] += v.co.z
    
    #Divid by the number of verts:
    for co in center:
        co /= len(bm.verts)
    
    #And return the average:
    return center

#bm is the bmesh; x, y, and z
#are the center of the bounds
#while l, w, h are the length
#height, width of the bounds,
#respectively. This finds all
#edges in bounds, and returns
#them to execute() in a list.
def get_e_in_bounds(edges, x, y, z, l, w, h):
    #Holds all edges within bounds:
    within_bounds = []
    
    x0 = x + (l / 2.0)
    x1 = x + (-l / 2.0)
    y0 = y + (w / 2.0)
    y1 = y + (-w / 2.0)
    z0 = z + (h / 2.0)
    z1 = z + (-h / 2.0)
    
    #If both verts of an edge are inside
    #bounds on the x, y, and z axis, add
    #that edge to the list of edges, and
    #finally, return the completed list:
    for e in edges:
        if e.verts[0].co.x <= x0 and e.verts[0].co.x >= x1:
            if e.verts[1].co.x <= x0 and e.verts[1].co.x >= x1:
                if e.verts[0].co.y <= y0 and e.verts[0].co.y >= y1:
                    if e.verts[1].co.y <= y0 and e.verts[1].co.y >= y1:
                        if e.verts[0].co.z <= z0 and e.verts[0].co.z >= z1:
                            if e.verts[1].co.z <= z0 and e.verts[1].co.z >= z1:
                                within_bounds += [e]
    return within_bounds

#Takes a list of indeces, and returns 
#a list of the corresponding vertices
def v_from_index(bm, indeces):
    verts = []
    for i in indeces:
        #Check for duplicates in indeces:
        duplicate = False
        for v in verts:
            if v == bm.verts[i]:
                duplicate = True
        if not duplicate:
            verts += [bm.verts[i]]
    return verts

#Turns a list of edges into a list of verts:
def verts_from_edges(edges):
    vert_list = []
    for e in edges:
        for v in e.verts:
            #Check for duplicates:
            duplicate = False
            for vl in vert_list:
                if v == vl:
                    duplicate = True
            if not duplicate:
                vert_list += [v]
    return vert_list

#Returns the faces that should be flat
def flat_faces(faces, co, dir):
    #If co is "X" and dir is "+"
    #look for all the flat faces
    #furthest along the +X-axis.
    co.upper()
    
    face_list = []
    max_val = 0.0
    
    #Get furthest value on that axis:
    for f in faces:
        for v in f.verts:
            if co == "X":
                axis = v.co.x
            elif co == "Y":
                axis = v.co.y
            elif co == "Z":
                axis = v.co.z
            else:
                print("Wrong value for co.")
            
            if dir == "+":
                if axis > max_val:
                    max_val = axis
            elif dir == "-":
                if axis < max_val:
                    max_val = axis
            else:
                print("Wrong value for dir.")
    #Now, the needed faces all 
    #have that furthest x-val:
    for f in faces:
        matches = 0
        length = len(f.verts)
        for v in f.verts:
            
            if co == "X":
                axis = v.co.x
            elif co == "Y":
                axis = v.co.y
            elif co == "Z":
                axis = v.co.z
            else:
                print("Wrong value for co.")
                
            if axis == max_val:
                matches += 1
        #If every vertex in the face matched
        #max_val, add that face to the list:
        if matches == length:
            face_list += [f]
    
    return face_list

from bpy.props import (
        BoolProperty,
        BoolVectorProperty,
        FloatProperty,
        FloatVectorProperty,
        IntProperty,
        )


class AddHandgun(bpy.types.Operator):
    """Add a simple handgun mesh"""
    bl_idname = "mesh.handgun_add"
    bl_label = "Add Handgun"
    bl_options = {'REGISTER', 'UNDO'}

    length = FloatProperty(
            name="Length",
            description="Length",
            default=0.5,
            )
    width = FloatProperty(
            name="Width Offset",
            description="Modifies the width of the slide and frame",
            default=0.0,
            )
    height = FloatProperty(
            name="Frame Height",
            description="Height of the gun's frame",
            min=0.01,
            default=1.0,
            )
    ep_x = FloatProperty(
            name="Ejection Port X Shift",
            description="Moves the ejection port forward or back",
            default=0.0,
            )
    ep_y = FloatProperty(
            name="Ejection Port Shift",
            description="Moves the ejection port left or right",
            default=-0.035,
            )
    ep_length = FloatProperty(
            name="Ejection Port Length",
            description="How long the ejection port is",
            min=0.01,
            default=0.575,
            )
    ep_width = FloatProperty(
            name="Ejection Port Width",
            description="How wide the ejection port is",
            min=0.01,
            default=0.401774,
            )
    ep_height = FloatProperty(
            name="Ejection Port Height",
            description="How tall the ejection port is",
            min=0.01,
            default=0.25,
            )
    str = FloatProperty(
            name="Bevel Offset",
            description="Strength of the bevel",
            min=0.0,
            default=0.5,
            )
    
    front_offset = FloatProperty(
            name="Front Offset",
            description="Move the front of the gun forward or back",
            default=0.25,
            )
    front_frame_shift = FloatProperty(
            name="Frame Front Offset",
            description="Move the front of the frame forward and back",
            default=-0.25,
            )
    
    b_rad = FloatProperty(
            name="Barrel Radius",
            description="Radius of the barrel",
            min=0.01,
            default=0.1,
            )
    c_rad = FloatProperty(
            name="Recoil Spring Radius",
            description="Radius of the recoil spring",
            min=0.01,
            default=0.075,
            )
    slide_h = FloatProperty(
            name="Slide Height",
            description="Shifts the slide top up",
            min=0.0,
            default=0.0325,
            )
    seg = IntProperty(
            name="Bevel Segments",
            description="Segments that make up the bevel",
            min=0,
            default=2,
            )
    cyl_seg = IntProperty(
            name="Cylinder Segments",
            description="Segments that make up the barrel and recoil spring cylinders",
            min=0,
            default=32,
            )
            
    location = FloatVectorProperty(
            name="Location",
            subtype='TRANSLATION',
            )
    rotation = FloatVectorProperty(
            name="Rotation",
            subtype='EULER',
            )
            
    def draw(self, context):
        layout = self.layout
        
        box = layout.box()
        col = box.column()
        col.label(text="Size")
        col.prop(self, "length")
        col.prop(self, "width")
        col.prop(self, "height")
        
        box = layout.box()
        col = box.column()
        col.label(text="Ejection Port")
        col.prop(self, "ep_length")
        col.prop(self, "ep_width")
        col.prop(self, "ep_height")
        col.prop(self, "ep_x")
        col.prop(self, "ep_y")
        
        box = layout.box()
        col = box.column()
        col.label(text="Barrel")
        col.prop(self, "b_rad")
        col.prop(self, "cyl_seg")
        col.prop(self, "ep_height")
        col.prop(self, "ep_x")
        col.prop(self, "ep_y")

    def execute(self, context):
        #Rename the variables
        #to something simpler
        l = self.length
        w = self.width
        h = self.height
        b_rad = self.b_rad
        c_rad = self.c_rad
        bh = self.slide_h
        epx = self.ep_x
        epy = self.ep_y
        epl = self.ep_length / 2.0
        epw = self.ep_width / 2.0
        eph = self.ep_height
        thick = 0.025
        str = self.str
        seg = self.seg
        cyl_seg = self.cyl_seg
        x0 = 0.5
        x1 = 0.5
        forward = 0.0
        front = self.front_offset
        frame_shift = self.front_frame_shift
        
        #Tweak some values:
        #epl /= 2.0
        #epw /= 2.0
        
        
        #Generate each piece:
        slide_obj = make_slide(str, seg, bh, l, w)
        ejection_port_obj = make_ejection_port(slide_obj, epx, epy, epl, epw, eph, bh, w)
        barrel_obj = make_barrel(slide_obj, str, seg, cyl_seg, l, b_rad, thick, h, bh)
        chamber_obj = make_chamber(str, seg, epx, epl, epw, eph, bh, w)
        recoil_spring_obj = make_recoil_spring(slide_obj, str, seg, l, c_rad, h, cyl_seg)
        frame_obj = make_frame(str, seg, l, frame_shift, w)
        loop_guard_obj = make_loop_guard(str, seg, x0, x1, w, h, thick)
        trigger_obj = make_trigger(str, seg, x0, x1, w, h)
        magazine_obj = make_magazine(str, seg, l, w, h, thick, forward)
        bullet_obj = make_bullet()
        
        """
        #Connect all pieces:
        bpy.ops.object.select_all(action='DESELECT')
        slide_obj.select = True
        ejection_port_obj.select = True
        barrel_obj.select = True
        chamber_obj.select = True
        recoil_spring_obj.select = True
        frame_obj.select = True
        loop_guard_obj.select = True
        trigger_obj.select = True
        magazine_obj.select = True
        bullet_obj.select = True
        bpy.context.scene.objects.active = slide_obj
        bpy.ops.object.join()
        context.active_object.name = 'Handgun'
        """

        return {'FINISHED'}


def menu_func(self, context):
    self.layout.operator(AddHandgun.bl_idname, icon='MESH_CUBE')


def register():
    bpy.utils.register_class(AddHandgun)
    bpy.types.INFO_MT_mesh_add.append(menu_func)


def unregister():
    bpy.utils.unregister_class(AddHandgun)
    bpy.types.INFO_MT_mesh_add.remove(menu_func)

if __name__ == "__main__":
    register()